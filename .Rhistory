sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate_dynamic(n_blocks  = -1,
true_pars = true,
sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate_dynamic(true_pars = true,
sigma_gen = -6,
dataset   = NULL))
expect_error(simulate_dynamic(true_pars = seq(.1, .4, .1),
sigma_gen = 0.01,
dataset   = NULL))
# tests with empirical data
data("data_dynamic")
d_copy = data_dynamic
d_copy$stim = NULL
expect_error(simulate_dynamic(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
d_copy = data_dynamic
d_copy$condition = NULL
expect_error(simulate_dynamic(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
# test with dynamic parameters
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
expect_error(simulate_dynamic(true_pars = true,
sigma_gen = 0.01,
dataset   = NULL))
})
# test whether the output we get is expected
test_that("the output we get is expected", {
n_blocks = 12
d = simulate_dynamic(n_blocks  = n_blocks,
true_pars = param_draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T),
sigma_gen = NULL)
expect_equal(nrow(d), n_blocks * 32)
expect_equal(ncol(d), 7)
expect_false("neural" %in% names(d))
# with neural data
d = simulate_dynamic(true_pars = param_draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T),
sigma_gen = 0.01)
expect_equal(nrow(d), 512)
expect_equal(ncol(d), 8)
expect_true("neural" %in% names(d))
# check the output of the simulated data
expect_true(all(unique(d$stim) == 1:4))
expect_true(all(unique(d$condition) %in% c("novel", "repeating")))
expect_true(all(unique(d$response) %in% 1:2))
expect_true(all(d$block_nr[seq(1, 512, 32)] == 1:16))
expect_true(all(d$rt > 0))
expect_true(all(c("mean_v1", "mean_v2") %in% colnames(d)))
expect_true(all(round(d$mean_v1 + d$mean_v2, .1) == 1))
})
# test for bad input
test_that("faulty input is effectively handled", {
# parameters that can be used to simulate data
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
# test with simulated data
expect_error(simulate_neural(true_pars = NULL,
sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate_neural(sub_id    = -1,
true_pars = true,
sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate_neural(n_blocks  = -1,
true_pars = true,
sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate_neural(true_pars = true,
sigma_gen = -6,
dataset   = NULL))
expect_error(simulate_neural(true_pars = seq(.1, .4, .1),
sigma_gen = 0.01,
dataset   = NULL))
# tests with empirical data
data("data_neural")
d_copy = data_neural
d_copy$stim = NULL
expect_error(simulate_neural(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
d_copy = data_neural
d_copy$repetition = NULL
expect_error(simulate_neural(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
d_copy = data_neural
d_copy$block_nr = NULL
expect_error(simulate_neural(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
# test with dynamic parameters
true = param_draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
expect_error(simulate_neural(true_pars = true,
sigma_gen = 0.01,
dataset   = NULL))
})
# test whether the output we get is expected
test_that("the output we get is expected", {
# without neural data
n_blocks = 12
d = simulate_neural(n_blocks  = n_blocks,
true_pars = param_draw(n_drift = 8,
dynamic = F),
sigma_gen = NULL)
expect_equal(nrow(d), n_blocks * 32)
expect_equal(ncol(d), 6)
expect_false("neural" %in% names(d))
# with neural data
d = simulate_neural(true_pars = param_draw(n_drift = 8,
dynamic = F),
sigma_gen = 0.01)
expect_equal(nrow(d), 512)
expect_equal(ncol(d), 7)
expect_true("neural" %in% names(d))
# check the output of the simulated data
expect_true(all(unique(d$stim) == 1:4))
expect_true(all(unique(d$repetition) == 1:8))
expect_true(all(unique(d$response) %in% 1:2))
expect_true(all(d$block_nr[seq(1, 512, 32)] == 1:16))
expect_true(all(d$rt > 0))
expect_length(unique(d$sub_id), 1)
})
require(labdance)
#'
set.seed(2022)
#'
# load prepared empirical data
data("data_neural")
#'
# get dLBA parameters
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
#'
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_data(true_pars = NULL,
sigma_gen = 0.01,
dataset   = data_neural)
head(simulated)
rm(list = ls())
require(labdance)
#'
set.seed(2022)
#'
# load prepared empirical data
data("data_neural")
head(data_neural)
rep(1:32, times = 8)
data_neural$block_nr = rep(1:32, times = 8)
# get dLBA parameters
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_data(true_pars = NULL,
sigma_gen = 0.01,
dataset   = data_neural)
nrow(data_neural)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_data(true_pars = NULL,
sigma_gen = 0.01,
dataset   = data_neural)
dataset = data_neural
if (!is.null(dataset)){
stopifnot(exprs = {
xor(all(c("stim", "condition") %in% colnames(dataset)), # dynamic
all(c("stim", "repetition", "block_nr") %in% colnames(dataset))) # neural
nrow(dataset > 0)
})
}
nrow(dataset > 0)
nrow(dataset) > 0
devtools::document()
require(labdance)
set.seed(2022)
# load prepared empirical data
data("data_neural")
data_neural$block_nr = rep(1:32, times = 8)
# get dLBA parameters
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_data(true_pars = NULL,
sigma_gen = 0.01,
dataset   = data_neural)
devtools::document()
require(labdance)
set.seed(2022)
# load prepared empirical data
data("data_neural")
data_neural$block_nr = rep(1:32, times = 8)
# get dLBA parameters
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_data(true_pars = NULL,
sigma_gen = 0.01,
dataset   = data_neural)
head(simulated)
devtools::document()
require(labdance)
set.seed(2022)
# load prepared empirical data
data("data_neural")
data_neural$block_nr = rep(1:32, times = 8)
# get dLBA parameters
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_data(true_pars = NULL,
sigma_gen = 0.01,
dataset   = data_neural)
head(simulated)
devtools::document()
require(labdance)
set.seed(2022)
# load prepared empirical data
data("data_neural")
# get LBA parameters (8 drift rates)
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_data(true_pars = true,
sigma_gen = 0.01,
dataset   = data_neural)
head(simulated)
require(labdance)
#'
set.seed(2022)
#'
# load prepared empirical data
data("data_neural")
#'
# get LBA parameters (8 drift rates)
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_neural(true_pars = true,
sigma_gen = 0.01,
dataset   = data_neural)
head(simulated)
require(labdance)
#'
set.seed(2022)
#'
# load prepared empirical data
data("data_neural")
#'
# get LBA parameters (8 drift rates)
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_neural(true_pars = NULL,
sigma_gen = 0.01,
dataset   = data_neural)
head(simulated)
devtools::document()
rm(list = ls())
rm(list = ls())
require(labdance)
set.seed(2022)
# load prepared empirical data
data("data_neural")
rm(list = ls())
require(labdance)
set.seed(2022)
# load prepared empirical data and add block numbers
data("data_neural")
data_neural$block_nr = rep(1:32, nrow(data_neural) / 32)
rm(list = ls())
require(labdance)
set.seed(2022)
# load prepared empirical data and add block numbers
data("data_neural")
data_neural$block_nr = rep(1:32, nrow(data_neural) / 32)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_data(true_pars = NULL,
sigma_gen = 0.01,
dataset   = data_neural)
head(simulated)
devtools::document()
rm(list = ls())
require(labdance)
set.seed(2022)
# load prepared empirical data and add block numbers
data("data_neural")
data_neural$block_nr = rep(1:32, nrow(data_neural) / 32)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_data(true_pars = NULL,
sigma_gen = 0.01,
dataset   = data_neural)
head(simulated)
rm(list = ls())
require(labdance)
set.seed(2022)
# load prepared empirical data and add block numbers
data("data_neural")
data_neural$block_nr = rep(1:32, nrow(data_neural) / 32)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_data(true_pars = NULL,
sigma_gen = 0.01,
dataset   = data_neural)
head(simulated)
devtools::document()
devtools::test()
rm(list = ls())
require(labdance)
set.seed(2022)
# load prepared empirical data
data("data_neural")
data_neural$block_nr = rep(1:32, nrow(data_neural) / 32)
# get LBA parameters (8 drift rates)
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_data(true_pars = true,
sigma_gen = 0.01,
dataset   = data_neural)
head(simulated)
rm(list = ls())
require(labdance)
set.seed(2022)
# load prepared empirical data
data("data_neural")
data_neural$block_nr = rep(1:32, nrow(data_neural) / 32)
# get LBA parameters (8 drift rates)
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_neural(true_pars = true,
sigma_gen = 0.01,
dataset   = data_neural)
head(simulated)
rm(list = ls())
require(labdance)
set.seed(2022)
# load prepared empirical data
data("data_dynamic")
head(data_dynamic)
# get LBA parameters (8 drift rates)
true = param_draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = TRUE)
rm(list = ls())
require(labdance)
set.seed(2022)
# load prepared empirical data
data("data_dynamic")
# get LBA parameters (8 drift rates)
true = param_draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = TRUE)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_neural(true_pars = true,
sigma_gen = 0.01,
dataset   = data_dynamic)
head(simulated)
rm(list = ls())
require(labdance)
set.seed(2022)
# load prepared empirical data
data("data_dynamic")
# get LBA parameters (8 drift rates)
true = param_draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = TRUE)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_dynamic(true_pars = true,
sigma_gen = 0.01,
dataset   = data_dynamic)
head(simulated)
all(data_dynamic$stim == simulated$stim)
rm(list = ls())
require(labdance)
set.seed(2022)
# load prepared empirical data
data("data_neural")
data_neural$block_nr = rep(1:32, nrow(data_neural) / 32)
# get LBA parameters (8 drift rates)
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_neural(true_pars = true,
sigma_gen = 0.01,
dataset   = data_neural)
head(simulated)
# check stimulus order
all(data_neural$stim == simulated$stim)
rm(list = ls())
require(labdance)
#'
set.seed(2022)
# load prepared empirical data
data("data_dynamic")
# get LBA parameters (8 drift rates)
true = param_draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = TRUE)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_data(true_pars = true,
dataset   = data_dynamic)
head(simulated)
# check stimulus order
all(data_dynamic$stim == simulated$stim)
library(labdance)
devtools::document()
library(labdance)
devtools::test()
devtools::test_coverage()
devtools::check(document = T)
?devtools::check
covr::package_coverage()
?covr::package_coverage()
?covr::package_coverage(path = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
covr::package_coverage(path = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
detach("package:labdance", unload = TRUE)
covr::package_coverage(path = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
devtools::test_coverage(path = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
?devtools::test_coverage()
?devtools::test_coverage(pkg = ""C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
?devtools::test_coverage(pkg = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
devtools::test_coverage(pkg = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
covr::codecov(token = "9f49bff8-cea0-46a7-9b4c-fddf4901b682")
?devtools::test_coverage(pkg = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
rhub::check_for_cran()
rhub::platforms()
rhub::check_for_cran()
?rhub::check_for_cran()
rhub::validate_email()
rhub::list_my_checks()
rhub::validate_email("pieter.huycke@hotmail.com")
library(labdance)
rhub::check_for_cran()
rhub::check_on_windows()
rhub::check()
rhub::validate_email()
rhub::validate_email("pieter.huycke@hotmail.com")
rhub::check()
library(labdance)
devtools::document()
results <- rhub::check_for_cran()
?rhub::check_for_cran()
results <- rhub::check_for_cran(platforms = NULL)
rhub::platforms()
results <- rhub::check_for_cran("labdance", platforms = NULL)
results <- rhub::check_for_cran("C:/Users/pieter/Downloads/GitHub/phuycke/labdance", platforms = NULL)
rhub::platforms()
rhub::check()
rhub::list_package_checks(email = "pieter.huycke@hotmail.com",
howmany = 4)
check = rhub::check_for_cran()
?rhub::check_for_cran()
trace("rhub::check_for_cran()")
trace("rhub::check_for_cran")
trace("check_for_cran")
library(rhub)
trace("check_for_cran")
trace("check_for_cran", edit = T)
check = rhub::check_for_cran()
check = rhub::check_for_cran()
check = rhub::check_for_cran(path = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance", platforms = NULL)
check = rhub::check_for_cran(path = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance", platforms = c(1, 2, 3, 4, 5))
rhub::platforms()
check = rhub::check_on_windows()
check = rhub::check_on_macos()
check = rhub::check_on_ubuntu()
check = rhub::check()
rhub::check_for_cran()
install.packages("https://cran.r-project.org/src/contrib/Archive/rhub/rhub_1.0.2.tar.gz", repos=NULL, type = "source")
detach("package:rhub", unload = TRUE)
detach("package:rhub", unload = TRUE)
install.packages("https://cran.r-project.org/src/contrib/Archive/rhub/rhub_1.0.2.tar.gz", repos=NULL, type = "source")
