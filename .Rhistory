(class(n_drift) %in% c("numeric", "NULL"))
is.logical(dynamic)
((is.null(n_drift) & isTRUE(dynamic)) |
(!is.null(n_drift) & isFALSE(dynamic)))
})
if (is.numeric(n_drift)) stopifnot(n_drift > 1)
if (!dynamic) stop("beta" %in% base_par, "Non dynamic model but beta is asked.")
for (e in base_par) stopifnot(e %in% c("a", "b", "t0", "sd", "beta"))
s1 <- c(
a    = runif(1, 0, .75),
b    = runif(1, .75, 1.5),
t0   = runif(1, 0.25, 0.75),
sd   = runif(1, 0, 0.5),
beta = runif(1, 0, 1)
)
if (dynamic){
return(s1[base_par])
} else{
s2 <- sort(rnorm(n_drift, 0.5, 0.1), decreasing = F)
names(s2) <- paste0("v_", seq_len(n_drift))
return(c(s1[base_par], s2))
}
}
n_drift = 8
dynamic = F
base_par = c("a", "beta")
param_draw(base_par, n_drift, dynamic)
require(rtdists)
param_draw <- function(base_par, n_drift = NULL, dynamic = F) {
# checking for faulty input
stopifnot(exprs = {
(class(n_drift) %in% c("numeric", "NULL"))
is.logical(dynamic)
((is.null(n_drift) & isTRUE(dynamic)) |
(!is.null(n_drift) & isFALSE(dynamic)))
})
if (is.numeric(n_drift)) stopifnot(n_drift > 1)
if (!dynamic) stop("beta" %in% base_par,
"\nNon dynamic model but beta is asked.")
for (e in base_par) stopifnot(e %in% c("a", "b", "t0", "sd", "beta"))
s1 <- c(
a    = runif(1, 0, .75),
b    = runif(1, .75, 1.5),
t0   = runif(1, 0.25, 0.75),
sd   = runif(1, 0, 0.5),
beta = runif(1, 0, 1)
)
if (dynamic){
return(s1[base_par])
} else{
s2 <- sort(rnorm(n_drift, 0.5, 0.1), decreasing = F)
names(s2) <- paste0("v_", seq_len(n_drift))
return(c(s1[base_par], s2))
}
}
n_drift = 8
dynamic = F
base_par = c("a", "beta")
param_draw(base_par, n_drift, dynamic)
require(rtdists)
param_draw <- function(base_par, n_drift = NULL, dynamic = F) {
# checking for faulty input
stopifnot(exprs = {
(class(n_drift) %in% c("numeric", "NULL"))
is.logical(dynamic)
((is.null(n_drift) & isTRUE(dynamic)) |
(!is.null(n_drift) & isFALSE(dynamic)))
})
if (is.numeric(n_drift)) stopifnot(n_drift > 1)
if (!dynamic) stop("beta" %in% base_par,
"\nNon dynamic model but beta is asked.")
for (e in base_par) stopifnot(e %in% c("a", "b", "t0", "sd", "beta"))
s1 <- c(
a    = runif(1, 0, .75),
b    = runif(1, .75, 1.5),
t0   = runif(1, 0.25, 0.75),
sd   = runif(1, 0, 0.5),
beta = runif(1, 0, 1)
)
if (dynamic){
return(s1[base_par])
} else{
s2 <- sort(rnorm(n_drift, 0.5, 0.1), decreasing = F)
names(s2) <- paste0("v_", seq_len(n_drift))
return(c(s1[base_par], s2))
}
}
n_drift = 8
dynamic = F
base_par = c("a", "b", "t0")
param_draw(base_par, n_drift, dynamic)
base_par
"beta" in base_[ar]
"beta" in base_par
"beta" %in% base_par
require(rtdists)
param_draw <- function(base_par, n_drift = NULL, dynamic = F) {
# checking for faulty input
stopifnot(exprs = {
(class(n_drift) %in% c("numeric", "NULL"))
is.logical(dynamic)
((is.null(n_drift) & isTRUE(dynamic)) |
(!is.null(n_drift) & isFALSE(dynamic)))
})
if (is.numeric(n_drift)) stopifnot(n_drift > 1)
if (!dynamic) if("beta" %in% base_par,
stop("\nNon dynamic model but beta is asked."))
for (e in base_par) stopifnot(e %in% c("a", "b", "t0", "sd", "beta"))
s1 <- c(
a    = runif(1, 0, .75),
b    = runif(1, .75, 1.5),
t0   = runif(1, 0.25, 0.75),
sd   = runif(1, 0, 0.5),
beta = runif(1, 0, 1)
)
if (dynamic){
return(s1[base_par])
} else{
s2 <- sort(rnorm(n_drift, 0.5, 0.1), decreasing = F)
names(s2) <- paste0("v_", seq_len(n_drift))
return(c(s1[base_par], s2))
}
}
n_drift = 8
dynamic = F
base_par = c("a", "b", "t0")
param_draw(base_par, n_drift, dynamic)
require(rtdists)
param_draw <- function(base_par, n_drift = NULL, dynamic = F) {
# checking for faulty input
stopifnot(exprs = {
(class(n_drift) %in% c("numeric", "NULL"))
is.logical(dynamic)
((is.null(n_drift) & isTRUE(dynamic)) |
(!is.null(n_drift) & isFALSE(dynamic)))
})
if (is.numeric(n_drift)) stopifnot(n_drift > 1)
if (!dynamic) if("beta" %in% base_par) stop("\nNon dynamic model but beta is asked.")
for (e in base_par) stopifnot(e %in% c("a", "b", "t0", "sd", "beta"))
s1 <- c(
a    = runif(1, 0, .75),
b    = runif(1, .75, 1.5),
t0   = runif(1, 0.25, 0.75),
sd   = runif(1, 0, 0.5),
beta = runif(1, 0, 1)
)
if (dynamic){
return(s1[base_par])
} else{
s2 <- sort(rnorm(n_drift, 0.5, 0.1), decreasing = F)
names(s2) <- paste0("v_", seq_len(n_drift))
return(c(s1[base_par], s2))
}
}
n_drift = 8
dynamic = F
base_par = c("a", "b", "t0")
param_draw(base_par, n_drift, dynamic)
require(rtdists)
param_draw <- function(base_par, n_drift = NULL, dynamic = F) {
# checking for faulty input
stopifnot(exprs = {
(class(n_drift) %in% c("numeric", "NULL"))
is.logical(dynamic)
((is.null(n_drift) & isTRUE(dynamic)) |
(!is.null(n_drift) & isFALSE(dynamic)))
})
if (is.numeric(n_drift)) stopifnot(n_drift > 1)
for (e in base_par) stopifnot(e %in% c("a", "b", "t0", "sd", "beta"))
if (!dynamic){
if("beta" %in% base_par){
stop("\nNon dynamic model but beta is asked.")
}
}
s1 <- c(
a    = runif(1, 0, .75),
b    = runif(1, .75, 1.5),
t0   = runif(1, 0.25, 0.75),
sd   = runif(1, 0, 0.5),
beta = runif(1, 0, 1)
)
if (dynamic){
return(s1[base_par])
} else{
s2 <- sort(rnorm(n_drift, 0.5, 0.1), decreasing = F)
names(s2) <- paste0("v_", seq_len(n_drift))
return(c(s1[base_par], s2))
}
}
n_drift = 8
dynamic = F
base_par = c("a", "b", "t0")
param_draw(base_par, n_drift, dynamic)
require(rtdists)
param_draw <- function(base_par, n_drift = NULL, dynamic = F) {
# checking for faulty input
stopifnot(exprs = {
(class(n_drift) %in% c("numeric", "NULL"))
is.logical(dynamic)
((is.null(n_drift) & isTRUE(dynamic)) |
(!is.null(n_drift) & isFALSE(dynamic)))
})
if (is.numeric(n_drift)) stopifnot(n_drift > 1)
for (e in base_par) stopifnot(e %in% c("a", "b", "t0", "sd", "beta"))
if (!dynamic){
if("beta" %in% base_par){
stop("\nNon dynamic model but beta is asked.")
}
}
s1 <- c(
a    = runif(1, 0, .75),
b    = runif(1, .75, 1.5),
t0   = runif(1, 0.25, 0.75),
sd   = runif(1, 0, 0.5),
beta = runif(1, 0, 1)
)
if (dynamic){
return(s1[base_par])
} else{
s2 <- sort(rnorm(n_drift, 0.5, 0.1), decreasing = F)
names(s2) <- paste0("v_", seq_len(n_drift))
return(c(s1[base_par], s2))
}
}
n_drift = 8
dynamic = F
base_par = c("a", "b", "beta")
param_draw(base_par, n_drift, dynamic)
class(base_par)
length(base_par)
class(base_par) == "character"
length(base_par) > 1
require(rtdists)
param_draw <- function(base_par, n_drift = NULL, dynamic = F) {
# checking for faulty input
stopifnot(exprs = {
class(base_par) == "character"
length(base_par) > 1
(class(n_drift) %in% c("numeric", "NULL"))
is.logical(dynamic)
((is.null(n_drift) & isTRUE(dynamic)) |
(!is.null(n_drift) & isFALSE(dynamic)))
})
if (is.numeric(n_drift)) stopifnot(n_drift > 1)
for (e in base_par) stopifnot(e %in% c("a", "b", "t0", "sd", "beta"))
if (!dynamic){
if("beta" %in% base_par){
stop("\nNon dynamic model but beta is asked.")
}
}
s1 <- c(
a    = runif(1, 0, .75),
b    = runif(1, .75, 1.5),
t0   = runif(1, 0.25, 0.75),
sd   = runif(1, 0, 0.5),
beta = runif(1, 0, 1)
)
if (dynamic){
return(s1[base_par])
} else{
s2 <- sort(rnorm(n_drift, 0.5, 0.1), decreasing = F)
names(s2) <- paste0("v_", seq_len(n_drift))
return(c(s1[base_par], s2))
}
}
n_drift = 8
dynamic = F
base_par = c("a", "b", "beta")
param_draw(base_par, n_drift, dynamic)
base_par = c("a", "b", "sd")
param_draw(base_par, n_drift, dynamic)
n_drift = NULL
dynamic = F
base_par = c("a", "b", "sd")
param_draw(base_par, n_drift, dynamic)
base_par = c("a", "b", "sd")
param_draw(base_par, n_drift, dynamic)
require(rtdists)
param_draw <- function(base_par, n_drift = NULL, dynamic = F) {
# checking for faulty input
stopifnot(exprs = {
class(base_par) == "character"
length(base_par) > 1
(class(n_drift) %in% c("numeric", "NULL"))
is.logical(dynamic)
((is.null(n_drift) & isTRUE(dynamic)) |
(!is.null(n_drift) & isFALSE(dynamic)))
})
if (is.numeric(n_drift)) stopifnot(n_drift > 1)
for (e in base_par) stopifnot(e %in% c("a", "b", "t0", "sd", "beta"))
if (!dynamic){
if("beta" %in% base_par){
stop("\nNon dynamic model but beta is asked.")
}
}
s1 <- c(
a    = runif(1, 0, .75),
b    = runif(1, .75, 1.5),
t0   = runif(1, 0.25, 0.75),
sd   = runif(1, 0, 0.5),
beta = runif(1, 0, 1)
)
if (dynamic){
return(s1[base_par])
} else{
s2 <- sort(rnorm(n_drift, 0.5, 0.1), decreasing = F)
names(s2) <- paste0("v_", seq_len(n_drift))
return(c(s1[base_par], s2))
}
}
n_drift = NULL
dynamic = T
base_par = c("a", "b", "sd")
param_draw(base_par, n_drift, dynamic)
require(rtdists)
param_draw <- function(base_par, n_drift = NULL, dynamic = F) {
# checking for faulty input
stopifnot(exprs = {
class(base_par) == "character"
length(base_par) > 1
(class(n_drift) %in% c("numeric", "NULL"))
is.logical(dynamic)
((is.null(n_drift) & isTRUE(dynamic)) |
(!is.null(n_drift) & isFALSE(dynamic)))
})
if (is.numeric(n_drift)) stopifnot(n_drift > 1)
for (e in base_par) stopifnot(e %in% c("a", "b", "t0", "sd", "beta"))
if (!dynamic){
if("beta" %in% base_par){
stop("\nNon dynamic model but beta is asked.")
}
}
s1 <- c(
a    = runif(1, 0, .75),
b    = runif(1, .75, 1.5),
t0   = runif(1, 0.25, 0.75),
sd   = runif(1, 0, 0.5),
beta = runif(1, 0, 1)
)
if (dynamic){
return(s1[base_par])
} else{
s2 <- sort(rnorm(n_drift, 0.5, 0.1), decreasing = F)
names(s2) <- paste0("v_", seq_len(n_drift))
return(c(s1[base_par], s2))
}
}
n_drift = NULL
dynamic = T
base_par = c("a", "b", "beta")
param_draw(base_par, n_drift, dynamic)
require(rtdists)
param_draw <- function(base_par, n_drift = NULL, dynamic = F) {
# checking for faulty input
stopifnot(exprs = {
class(base_par) == "character"
length(base_par) > 1
(class(n_drift) %in% c("numeric", "NULL"))
is.logical(dynamic)
((is.null(n_drift) & isTRUE(dynamic)) |
(!is.null(n_drift) & isFALSE(dynamic)))
})
if (is.numeric(n_drift)) stopifnot(n_drift > 1)
for (e in base_par) stopifnot(e %in% c("a", "b", "t0", "sd", "beta"))
if (!dynamic){
if("beta" %in% base_par){
stop("\nNon dynamic model but beta is asked.")
}
}
s1 <- c(
a    = runif(1, 0, .75),
b    = runif(1, .75, 1.5),
t0   = runif(1, 0.25, 0.75),
sd   = runif(1, 0, 0.5),
beta = runif(1, 0, 1)
)
if (dynamic){
return(s1[base_par])
} else{
s2 <- sort(rnorm(n_drift, 0.5, 0.1), decreasing = F)
names(s2) <- paste0("v_", seq_len(n_drift))
return(c(s1[base_par], s2))
}
}
n_drift = NULL
dynamic = T
base_par = c("beta", "b", "beta")
param_draw(base_par, n_drift, dynamic)
length(base_par) == length(unique(base_par))
require(rtdists)
param_draw <- function(base_par, n_drift = NULL, dynamic = F) {
# checking for faulty input
stopifnot(exprs = {
class(base_par) == "character"
length(base_par) > 1
length(base_par) == length(unique(base_par))
(class(n_drift) %in% c("numeric", "NULL"))
is.logical(dynamic)
((is.null(n_drift) & isTRUE(dynamic)) |
(!is.null(n_drift) & isFALSE(dynamic)))
})
if (is.numeric(n_drift)) stopifnot(n_drift > 1)
for (e in base_par) stopifnot(e %in% c("a", "b", "t0", "sd", "beta"))
if (!dynamic){
if("beta" %in% base_par){
stop("\nNon dynamic model but beta is asked.")
}
}
s1 <- c(
a    = runif(1, 0, .75),
b    = runif(1, .75, 1.5),
t0   = runif(1, 0.25, 0.75),
sd   = runif(1, 0, 0.5),
beta = runif(1, 0, 1)
)
if (dynamic){
return(s1[base_par])
} else{
s2 <- sort(rnorm(n_drift, 0.5, 0.1), decreasing = F)
names(s2) <- paste0("v_", seq_len(n_drift))
return(c(s1[base_par], s2))
}
}
n_drift = NULL
dynamic = T
base_par = c("beta", "b", "beta")
param_draw(base_par, n_drift, dynamic)
base_par = c(1, "b", "beta")
class(base_par)
all(base_par, is.numeric)
all(is.numeric(base_par))
base_par = c("a", "b", "beta")
all(is.numeric(base_par))
all(is.character(base_par))
all(is.character(base_par))
require(rtdists)
param_draw <- function(base_par, n_drift = NULL, dynamic = F) {
# checking for faulty input
stopifnot(exprs = {
all(is.character(base_par))
length(base_par) > 1
length(base_par) == length(unique(base_par))
(class(n_drift) %in% c("numeric", "NULL"))
is.logical(dynamic)
((is.null(n_drift) & isTRUE(dynamic)) |
(!is.null(n_drift) & isFALSE(dynamic)))
})
if (is.numeric(n_drift)) stopifnot(n_drift > 1)
for (e in base_par) stopifnot(e %in% c("a", "b", "t0", "sd", "beta"))
if (!dynamic){
if("beta" %in% base_par){
stop("\nNon dynamic model but beta is asked.")
}
}
s1 <- c(
a    = runif(1, 0, .75),
b    = runif(1, .75, 1.5),
t0   = runif(1, 0.25, 0.75),
sd   = runif(1, 0, 0.5),
beta = runif(1, 0, 1)
)
if (dynamic){
return(s1[base_par])
} else{
s2 <- sort(rnorm(n_drift, 0.5, 0.1), decreasing = F)
names(s2) <- paste0("v_", seq_len(n_drift))
return(c(s1[base_par], s2))
}
}
n_drift = NULL
dynamic = T
base_par = c("a", "b", "beta")
param_draw(base_par, n_drift, dynamic)
base_par = c("beta", "b", "a")
param_draw(base_par, n_drift, dynamic)
rm(list = ls())
require(rtdists)
# model functions ----
param.draw <- function(base_par, n_drift = NULL, dynamic = F) {
# checking for faulty input
stopifnot(exprs = {
all(is.character(base_par))
length(base_par) > 1
length(base_par) == length(unique(base_par))
(class(n_drift) %in% c("numeric", "NULL"))
is.logical(dynamic)
((is.null(n_drift) & isTRUE(dynamic)) |
(!is.null(n_drift) & isFALSE(dynamic)))
})
if (is.numeric(n_drift)) stopifnot(n_drift > 1)
for (e in base_par) stopifnot(e %in% c("a", "b", "t0", "sd", "beta"))
if (!dynamic){
if("beta" %in% base_par){
stop("\nNon dynamic model but beta is asked.")
}
}
s1 <- c(
a    = runif(1, 0, .75),
b    = runif(1, .75, 1.5),
t0   = runif(1, 0.25, 0.75),
sd   = runif(1, 0, 0.5),
beta = runif(1, 0, 1)
)
if (dynamic){
return(s1[base_par])
} else{
s2 <- sort(rnorm(n_drift, 0.5, 0.1), decreasing = F)
names(s2) <- paste0("v_", seq_len(n_drift))
return(c(s1[base_par], s2))
}
}
param.draw(n_drift = 8, dynamic = F)
