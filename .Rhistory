# get parameters, simulate data and calculate likelihood
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset   = NULL)
ll.true = negloglik.behavioral(to_optim = true,
dataset  = simulated)
# calculate likelihood for another parameter set
test = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
ll.test = negloglik.behavioral(to_optim = test,
dataset  = simulated)
# check that likelihood is lowest for the true parameter set
sprintf("Negative loglikelihood for true parameters: %.02f", ll.true)
sprintf("Negative loglikelihood for other parameters: %.02f", ll.test)
devtools::document()
devtools::document()
rm(list = ls())
library(labdance)
# get parameters, simulate data and calculate likelihood
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset   = NULL)
ll.true = negloglik.behavioral(to_optim = true,
dataset  = simulated)
# calculate likelihood for another parameter set
test = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated.2 = simulate.data(true_pars = test,
dataset   = NULL)
View(simulated)
View(simulated)
rm(list = ls())
library(labdance)
# get parameters, simulate data and calculate likelihood
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
View(simulated)
rm(list = ls())
library(labdance)
# get parameters, simulate data and calculate likelihood
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset   = NULL)
true
# get parameters, simulate data and calculate likelihood
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset   = NULL)
View(simulated)
dataset = simulated
!is.null(dataset$repetition)
View(simulated)
names(dataset)
("mean_v1" %in% names(dataset))
("mean_v1" %in% names(dataset)
)
dataset$neural
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
dataset = simulated
(!is.null(dataset$repetition))
dataset$repetition)
dataset$repetition
View(simulated)
rm(list = ls())
library(labdance)
# get parameters, simulate data and calculate likelihood
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
rm(list = ls())
library(labdance)
# get parameters, simulate data and calculate likelihood
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = NULL,
dynamic  = F)
dataset = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
rm(list = ls())
library(labdance)
# get parameters, simulate data and calculate likelihood
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
dataset = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
View(dataset)
!is.null(dataset$repetition)
# for nLBA
sum_ll = 0
for (i in seq_along(unique(dataset$repetition))){
sum_ll = sum_ll + sum((dataset[dataset$repetition == i] - to_optim[[grep(sprintf("v_%d", i), names(to_optim))]])^2)
}
unique(dataset$repetition))
unique(dataset$repetition)
seq_along(unique(dataset$repetition))
i = 1
dataset$repetition == i
dataset$neural[dataset$repetition == i]
to_optim[[grep(sprintf("v_%d", i), names(to_optim))]]
to_optim = true
to_optim
to_optim[[grep(sprintf("v_%d", i), names(to_optim))]]
sum((dataset$neural[dataset$repetition == i] - to_optim[[grep(sprintf("v_%d", i), names(to_optim))]])^2)
# for nLBA
sum_ll = 0
for (i in seq_along(unique(dataset$repetition))){
sum_ll = sum_ll + sum((dataset$neural[dataset$repetition == i] - to_optim[[grep(sprintf("v_%d", i), names(to_optim))]])^2)
}
sum_ll
rm(list = ls())
library(labdance)
# get parameters, simulate data and calculate likelihood
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
dataset = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
View(dataset)
to_optim = true
"mean_v1" %in% names(dataset)
dataset$neural
dataset$neural - dataset$mean_v1
(dataset$neural - dataset$mean_v1)^2)
sum((dataset$neural - dataset$mean_v1)^2)
devtools::document()
rm(list = ls())
library(labdance)
# get parameters, simulate data and calculate likelihood
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
dataset = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
likelihood.neural(to_optim = true,
dataset  = dataset)
rm(list = ls())
library(labdance)
# get parameters, simulate data and calculate likelihood
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
dataset = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
likelihood.neural(to_optim = true,
dataset  = dataset)
likelihood.neural(to_optim = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T),
dataset  = dataset)
param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
rm(list = ls())
library(labdance)
# get parameters, simulate data and calculate likelihood
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
test = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
dataset = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
likelihood.neural(to_optim = true,
dataset  = dataset)
likelihood.neural(to_optim = test,
dataset  = dataset)
rm(list = ls())
library(labdance)
# neural LBA
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
dataset = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
likelihood.neural(to_optim = true,
dataset  = dataset)
# dynamic neural LBA
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
dataset = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
likelihood.neural(to_optim = true,
dataset  = dataset)
devtools::document()
# for neural data, return the sum of both
ll.neural = likelihood.neural(to_optim, dataset)
ll.neural
ll.behavioral = negloglik.behavioral(to_optim, dataset)
to_optim - true
to_optim = true
# for neural data, return the sum of both
ll.neural = likelihood.neural(to_optim, dataset)
ll.neural
ll.behavioral = negloglik.behavioral(to_optim, dataset)
ll.behavioral
devtools::document()
devtools::document()
rm(list = ls())
library(labdance)
# dLBA
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
likelihood.summed(to_optim = true,
dataset  = simulated)
rm(list = ls())
library(labdance)
# dLBA
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = NULL)
View(simulated)
rm(list = ls())
library(labdance)
# dLBA
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = NULL)
View(simulated)
rm(list = ls())
library(labdance)
# dLBA
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = NULL)
likelihood.summed(to_optim = true,
dataset  = simulated)
rm(list = ls())
library(labdance)
# dLBA
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = NULL)
ll.s = likelihood.summed(to_optim = true,
dataset  = simulated)
ll.b = negloglik.behavioral(to_optim = true,
dataset  = simulated)
stopifnot(ll.s == ll.b)
# dynamic neural LBA
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
ll.s = likelihood.summed(to_optim = true,
dataset  = simulated)
rm(list = ls())
library(labdance)
# dynamic LBA
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = NULL)
ll.s = likelihood.summed(to_optim = true,
dataset  = simulated)
ll.b = negloglik.behavioral(to_optim = true,
dataset  = simulated)
stopifnot(ll.s == ll.b)
# dynamic neural LBA
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
ll.s = likelihood.summed(to_optim = true,
dataset  = simulated)
ll.s
View(simulated)
to_optim = true
dataset$repetition
dataset = simulated
dataset$repetition
ll.b = negloglik.behavioral(to_optim = true,
dataset  = simulated)
ll.b
ll.n = likelihood.neural(to_optim = true,
dataset  = simulated)
ll.n
ll.s = likelihood.summed(to_optim  = true,
dataset   = simulated,
sigma_mod = 0.01)
ll.s
rm(list = ls())
library(labdance)
# dynamic LBA
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = NULL)
ll.s = likelihood.summed(to_optim = true,
dataset  = simulated)
ll.b = negloglik.behavioral(to_optim = true,
dataset  = simulated)
stopifnot(ll.s == ll.b)
# dynamic neural LBA
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
ll.b = negloglik.behavioral(to_optim = true,
dataset  = simulated)
ll.n = likelihood.neural(to_optim = true,
dataset  = simulated)
ll.s = likelihood.summed(to_optim  = true,
dataset   = simulated,
sigma_mod = 0.01)
stopifnot(ll.s == (ll.b + ll.n))
ll.b
ll.n
stopifnot(ll.s == (ll.b + 1/(2*(0.01)^2)) * ll.n))
(ll.b + (1/(2*(0.01)^2)) * ll.n)
ll.s
stopifnot(ll.s == (ll.b + (1/(2*(0.01)^2)) * ll.n))
rm(list = ls())
library(labdance)
# dynamic LBA
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = NULL)
ll.s = likelihood.summed(to_optim = true,
dataset  = simulated)
ll.b = negloglik.behavioral(to_optim = true,
dataset  = simulated)
stopifnot(ll.s == ll.b)
# dynamic neural LBA
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
ll.b = negloglik.behavioral(to_optim = true,
dataset  = simulated)
ll.n = likelihood.neural(to_optim = true,
dataset  = simulated)
ll.s = likelihood.summed(to_optim  = true,
dataset   = simulated,
sigma_mod = 0.01)
stopifnot(ll.s == (ll.b + (1/(2*(0.01)^2)) * ll.n))
devtools::dev_mode()
devtools::document()
rm(list = ls())
library(labdance)
# dynamic LBA
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
View(simulated)
to_optim = true
dataset = simulated
cycles    = 500
sigma_mod = 0.01
if ("beta" %in% base_par){
dynamic = T
n_drift = NULL
} else{
dynamic = F
n_drift = length(unique(dataset$repetition))
}
base_par = c("a", "b", "t0", "sd")
bp = c("a", "b", "t0", "sd")
base_par = bp
# determine the type of data
if ("beta" %in% base_par){
dynamic = T
n_drift = NULL
} else{
dynamic = F
n_drift = length(unique(dataset$repetition))
}
dynamic
n_drift
param.draw(base_par = base_par,                     # initial parameter guess
n_drift  = n_drift,
dynamic  = dynamic)
n_drift
class(n_drift)
devtools::document()
rm(list = ls())
library(labdance)
# dynamic LBA
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
bp = c("a", "b", "t0", "sd")
rm(list = ls())
library(labdance)
# dynamic LBA
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
bp = c("a", "b", "t0", "sd")
base_par = bp
to_optim = true
dataset = simulated
sigma_mod = 0.01
# determine the type of data
if ("beta" %in% base_par){
dynamic = T
n_drift = NULL
} else{
dynamic = F
n_drift = length(unique(dataset$repetition))
}
param.draw(base_par = base_par,                     # initial parameter guess
n_drift  = n_drift,
dynamic  = dynamic)
dataset$rt
dataset$response
dataset$repetition
dataset$weight_reset
dataset$neural
dataset$mean_v1
sigma_mod
4 + NULL
length(base_par)
# determine the type of data
if ("beta" %in% base_par){
dynamic = T
n_drift = NULL
l       = length(base_par)
} else{
dynamic = F
n_drift = length(unique(dataset$repetition))
l       = length(base_par) + n_drift
}
l
optim(param.draw(base_par = base_par,                # initial parameter guess
n_drift  = n_drift,
dynamic  = dynamic),
likelihood.summed,                             # goal function to optimize
method        = "L-BFGS-B",                    # minimization method
rt            = dataset$rt,
response      = dataset$response,
conditions    = dataset$repetition,
wr            = dataset$weight_reset,
neural_dat    = dataset$neural,
netinput      = dataset$mean_v1,
sigma_mod     = sigma_mod,
lower         = rep(0, times = l),             # parameter lower bound
upper         = rep(Inf, times = l),           # parameter upper bound
control       = list(maxit = 5000),
hessian       = TRUE)
dataset$rt
optim(param.draw(base_par = base_par,                # initial parameter guess
n_drift  = n_drift,
dynamic  = dynamic),
likelihood.summed,                             # goal function to optimize
method        = "L-BFGS-B",                    # minimization method
dataset       = dataset,
sigma_mod     = sigma_mod,
lower         = rep(0, times = l),             # parameter lower bound
upper         = rep(Inf, times = l),           # parameter upper bound
control       = list(maxit = 5000),
hessian       = TRUE)
names(true)
devtools::document()
