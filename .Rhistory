df
View(df)
devtools::document()
rm(list = ls())
library(labdance)
# load prepared empirical data
load("data/sub-02 - simulate.dynamic.RData")
# simulate netinputs based on data and known beta
ni = netinputs(beta = .7,
dataset = d)
View(ni)
rm(list = ls())
library(labdance)
# load prepared empirical data
load("data/sub-02 - simulate.neural.RData")
# simulate netinputs based on data and known beta
ni = netinputs(beta = .7,
dataset = d)
head(d)
rm(list = ls())
library(labdance)
# load prepared empirical data
load("data/sub-02 - simulate.neural.RData")
d$condition  = "novel"
# simulate netinputs based on data and known beta
ni = netinputs(beta = .7,
dataset = d)
View(ni)
print(ni[[1]][1:10], ni[[2]][1:10])
ni[[2]][1:10]
print(ni[[1]][1:5], ni[[2]][1:5])
ni[[1]][1:5]
print(ni[[1]], ni[[2]])
print(rbind(ni[[1]][1:5], ni[[2]][1:5]))
print(rbind(ni[[1]][20:30], ni[[2]][20:30]))
print(rbind(ni[[1]][20:25], ni[[2]][20:25]))
rm(list = ls())
library(labdance)
# load prepared empirical data
load("data/sub-02 - simulate.dynamic.RData")
# simulate netinputs based on data and known beta
ni = netinputs(beta = .7,
dataset = d)
print(rbind(ni[[1]][20:25], ni[[2]][20:25]))
rm(list = ls())
library(labdance)
# load prepared empirical data
load("data/sub-02 - simulate.dynamic.RData")
# simulate netinputs based on data and known beta
ni = netinputs(beta = .2,
dataset = d)
print(rbind(ni[[1]][20:25], ni[[2]][20:25]))
rm(list = ls())
require(labdance)
# load prepared empirical data
load("data/sub-02 - simulate.dynamic.RData")
# simulate netinputs based on data and known beta
ni = netinputs(beta = .7,
dataset = d)
print(rbind(ni[[1]][20:25], ni[[2]][20:25]))
devtools::document()
# get dLBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = TRUE)
rm(list = ls())
library(labdance)
# load prepared empirical data
load("data/sub-02 - simulate.neural.RData")
# get dLBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = TRUE)
rm(list = ls())
library(labdance)
# load prepared empirical data
load("data/sub-02 - simulate.neural.RData")
# get dLBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
names(true)
to_optim = true
!"beta" %in% names(to_optim)
# load prepared empirical data
load("data/sub-02 - simulate.dynamic.RData")
dataset = d
!is.null(dataset$conditions)
# at least one of the two must be NULL
stopifnot(!is.null(dataset$conditions))
if (is.null(conditions)){
dataset$conditions = 1
}
# at least one of the two must be NULL
if (is.null(dataset$conditions)){
dataset$conditions = 1
}
dataset$conditions = 1
head(dataset)
seq_along(unique(dataset$conditions))
# assign parameters to variable names
if ("beta" %in% names(to_optim)){
par = c(A       = to_optim[["a"]],
b       = to_optim[["b"]],
t0      = to_optim[["t0"]],
mean_v1 = F,
mean_v2 = F,
sd_v2   = to_optim[["sd"]])
}else{
par = c(A       = to_optim[["a"]],
b       = to_optim[["b"]],
t0      = to_optim[["t0"]],
mean_v1 = to_optim[[grep(sprintf("v_%d", i), names(to_optim))]],
mean_v2 = 1-to_optim[[grep(sprintf("v_%d", i), names(to_optim))]],
sd_v2   = to_optim[["sd"]])
}
names(to_optim)
# get dLBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
to_optim = T
# at least one of the two must be NULL
if (is.null(dataset$conditions)){
dataset$conditions = 1
}
# summed loglik
sum_ll = 0
# assign parameters to variable names
if ("beta" %in% names(to_optim)){
par = c(A       = to_optim[["a"]],
b       = to_optim[["b"]],
t0      = to_optim[["t0"]],
mean_v1 = F,
mean_v2 = F,
sd_v2   = to_optim[["sd"]])
}else{
par = c(A       = to_optim[["a"]],
b       = to_optim[["b"]],
t0      = to_optim[["t0"]],
mean_v1 = to_optim[[grep(sprintf("v_%d", i), names(to_optim))]],
mean_v2 = 1-to_optim[[grep(sprintf("v_%d", i), names(to_optim))]],
sd_v2   = to_optim[["sd"]])
}
spar = par[!grepl("[12]$", names(par))]
to_optim
to_optim = true
# assign parameters to variable names
if ("beta" %in% names(to_optim)){
par = c(A       = to_optim[["a"]],
b       = to_optim[["b"]],
t0      = to_optim[["t0"]],
mean_v1 = F,
mean_v2 = F,
sd_v2   = to_optim[["sd"]])
}else{
par = c(A       = to_optim[["a"]],
b       = to_optim[["b"]],
t0      = to_optim[["t0"]],
mean_v1 = to_optim[[grep(sprintf("v_%d", i), names(to_optim))]],
mean_v2 = 1-to_optim[[grep(sprintf("v_%d", i), names(to_optim))]],
sd_v2   = to_optim[["sd"]])
}
par
spar = par[!grepl("[12]$", names(par))]
spar
# distribution parameters
dist_par_names  = unique(sub("[12]$", "", grep("[12]$", names(par), value = TRUE)))
dist_par        = vector("list",
length = length(dist_par_names))
names(dist_par) = dist_par_names
for (j in dist_par_names){
dist_par[[j]] = as.list(unname(par[grep(j, names(par))]))
}
# set common sd's
dist_par$sd_v = c(dist_par$sd_v, dist_par$sd_v)
# compute netinputs based on the fed in learning rate, and use this as drift rates
dist_par$mean_v = netinputs(beta = to_optim[[grep("beta", names(to_optim))]],
dataset = dataset)
dist_par
length(unique(dataset$conditions)) == 1
# get summed log-likelihood
if (length(unique(dataset$conditions)) == 1){
react = list(dataset$rt)
resp  = list(dataset$response)
} else{
react = list(dataset$rt[dataset$conditions == i])
resp  = list(dataset$response[dataset$conditions == i])
}
d = do.call(dLBA, args = c(rt           = react,
response     = resp,
spar,
dist_par,
distribution = "norm",
silent       = TRUE))
trace("dLBA", edit = T)
d = do.call(dLBA, args = c(rt           = react,
response     = resp,
spar,
dist_par,
distribution = "norm",
silent       = TRUE))
d = do.call(dLBA, args = c(rt           = react,
response     = resp,
spar,
dist_par,
distribution = "norm",
silent       = TRUE))
spar
dist_par
react
resp
d = do.call(dLBA, args = c(rt           = react / 1000,
response     = resp + 1,
spar,
dist_par,
distribution = "norm",
silent       = TRUE))
(react / 1000)
# get summed log-likelihood
if (length(unique(dataset$conditions)) == 1){
react = list(dataset$rt / 1000)
resp  = list(dataset$response + 1)
} else{
react = list(dataset$rt[dataset$conditions == i])
resp  = list(dataset$response[dataset$conditions == i])
}
d = do.call(dLBA, args = c(rt           = react / 1000,
response     = resp + 1,
spar,
dist_par,
distribution = "norm",
silent       = TRUE))
dataset$rt = dataset$rt /1000
dataset$response = dataset$response + 1
# get summed log-likelihood
if (length(unique(dataset$conditions)) == 1){
react = list(dataset$rt)
resp  = list(dataset$response)
} else{
react = list(dataset$rt[dataset$conditions == i])
resp  = list(dataset$response[dataset$conditions == i])
}
d = do.call(dLBA, args = c(rt           = react,
response     = resp,
spar,
dist_par,
distribution = "norm",
silent       = TRUE))
resp
dataset[dataset$response == 0, ] = 1
dataset$response
resp  = list(dataset$response)
d = do.call(dLBA, args = c(rt           = react,
response     = resp,
spar,
dist_par,
distribution = "norm",
silent       = TRUE))
d
any(d < 0e-10)
ll = -sum(log(d))
ll
devtools::document()
library(dplyr)
head(d)
# load prepared empirical data
load("data/sub-02 - simulate.dynamic.RData")
head(d)
d = d %>% mutate(rt = rt / 1000,
response = response + 1,
response = case_when(response == 0 ~ 1))
View(d)
d = d %>% mutate(rt = rt / 1000,
response = response + 1)
# load prepared empirical data
load("data/sub-02 - simulate.dynamic.RData")
library(dplyr)
d = d %>% mutate(rt = rt / 1000,
response = response + 1)
View(d)
d = d %>% mutate(rt = rt / 1000,
response = response + 1) %>%
mutate(response = case_when(response == 0 ~ 1))
rm(list = ls())
library(labdance)
# load prepared empirical data
load("data/sub-02 - simulate.dynamic.RData")
library(dplyr)
d = d %>% mutate(rt = rt / 1000,
response = response + 1) %>%
mutate(response = case_when(response == 0 ~ 1))
View(d)
rm(list = ls())
library(labdance)
# load prepared empirical data
load("data/sub-02 - simulate.dynamic.RData")
library(dplyr)
d = d %>% mutate(rt = rt / 1000,
response = response + 1)
d[d$response == 0, ] = 1
View(d)
save(d, file = "data/sub-02 - simulate.dynamic.RData")
rm(list = ls())
library(labdance)
# load prepared empirical data
load("data/sub-02 - simulate.dynamic.RData")
View(d)
devtools::document()
rm(list = ls())
library(labdance)
# load prepared empirical data
load("data/sub-02 - simulate.dynamic.RData")
# get dLBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
ll = negloglik.behavioral(to_optim = true,
dataset  = d)
ll
# get dLBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
ll = negloglik.behavioral(to_optim = true,
dataset  = d)
ll
rm(list = ls())
library(labdance)
# load prepared empirical data
load("data/sub-02 - simulate.neural.RData")
View(d)
d = d %>% mutate(rt = rt / 1000)
View(d)
devtools::document()
rm(list = ls())
library(labdance)
# load prepared empirical data
load("data/sub-02 - simulate.neural.RData")
d = d %>% mutate(rt = rt / 1000) %>%
rename(condition = repetition)
# get dLBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
ll = negloglik.behavioral(to_optim = true,
dataset  = d)
ll
to_optim = true
dataset  = d
simulated = simulate.data(true_pars = true,
dataset = d)
View(simulated)
ll = negloglik.behavioral(to_optim = true,
dataset  = simulated)
ll
rm(list = ls())
library(labdance)
# get LBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset = d)
ll = negloglik.behavioral(to_optim = true,
dataset  = simulated)
cat("Behavioral LL: ", ll)
# get dLBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset = d)
ll = negloglik.behavioral(to_optim = true,
dataset  = simulated)
cat("Behavioral LL: ", ll)
rm(list = ls())
library(labdance)
# get LBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset = d)
ll = negloglik.behavioral(to_optim = true,
dataset  = simulated)
cat("Behavioral LL: ", ll)
# get dLBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset = d)
ll = negloglik.behavioral(to_optim = true,
dataset  = simulated)
cat("Behavioral LL: ", ll)
rm(list = ls())
library(labdance)
# get LBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset = d)
ll = negloglik.behavioral(to_optim = true,
dataset  = simulated)
cat("Behavioral LL: ", ll)
# get dLBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset = d)
true_pars = true
dataset = d
simulated = simulate.data(true_pars = true,
dataset = d)
"beta" %in% names(true_pars)
simulate.dynamic(n_blocks, true_pars, sigma_gen, dataset)
sigma_gen = NULL
sub_id    = 1
n_blocks  = 16
simulate.dynamic(n_blocks, true_pars, sigma_gen, dataset)
head(simulated)
rm(list = ls())
library(labdance)
# get LBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset   = NULL)
ll = negloglik.behavioral(to_optim = true,
dataset  = simulated)
cat("Behavioral LL: ", ll)
# get dLBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset   = NULL)
ll = negloglik.behavioral(to_optim = true,
dataset  = simulated)
View(simulated)
ll = negloglik.behavioral(to_optim = true,
dataset  = simulated)
# get dLBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
true
simulated = simulate.data(true_pars = true,
dataset   = NULL)
ll = negloglik.behavioral(to_optim = true,
dataset  = simulated)
ll
to_optim = true
dataset  = simulated
head(simulated)
rm(list = ls())
library(labdance)
# get LBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset   = NULL)
ll = negloglik.behavioral(to_optim = true,
dataset  = simulated)
cat("Behavioral LL: ", ll, "\n")
# get dLBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset   = NULL)
simulated$condition = NULL
ll = negloglik.behavioral(to_optim = true,
dataset  = simulated)
cat("Behavioral LL: ", ll, "\n")
rm(list = ls())
library(labdance)
load("data/sub-02 - simulate.dynamic.RData")
rm(list = ls())
library(labdance)
load("data/sub-02 - simulate.dynamic.RData")
head(d)
rm(list = ls())
library(labdance)
load("data/sub-02 - simulate.neural.RData")
head(d)
devtools::document()
rm(list = ls())
library(labdance)
# get LBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset   = NULL)
ll = negloglik.behavioral(to_optim = true,
dataset  = simulated)
cat("Behavioral LL: ", ll, "\n")
# get dLBA parameters
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset   = NULL)
ll = negloglik.behavioral(to_optim = true,
dataset  = simulated)
cat("Behavioral LL: ", ll, "\n")
