sigma_gen = 0.01,
dataset   = NULL))
# tests with empirical data
load(file = system.file("data", "sub-02 - simulate.neural.RData",
package = "labdance"))
d_copy = d
d_copy$stim = NULL
expect_error(simulate.neural(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
d_copy = d
d_copy$repetition = NULL
expect_error(simulate.neural(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
d_copy = d
d_copy$block_nr = NULL
expect_error(simulate.neural(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
# test with dynamic parameters
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
expect_error(simulate.neural(true_pars = true,
sigma_gen = 0.01,
dataset   = NULL))
})
# test whether the output we get is expected
test_that("the output we get is expected", {
# without neural data
d = simulate.neural(true_pars = param.draw(n_drift = 8,
dynamic = F),
sigma_gen = NULL)
expect_equal(nrow(d), 512)
expect_equal(ncol(d), 6)
expect_false("neural" %in% names(d))
# with neural data
d = simulate.neural(true_pars = param.draw(n_drift = 8,
dynamic = F),
sigma_gen = 0.01)
expect_equal(nrow(d), 512)
expect_equal(ncol(d), 7)
expect_true("neural" %in% names(d))
# checks of the stimuli and the repetitions
expect_true(all(unique(d$stim) == 1:4))
expect_true(all(unique(d$repetition) == 1:8))
expect_true(all(unique(d$response) == 1:2))
expect_true(all(d$block_nr[seq(1, 512, 32)] == 1:16))
})
expect_true(all(d$rt > 0))
head(d)
expect_length(unique(d$sub_id), 1)
devtools::test()
unique(d$response)
expect_true(all(unique(d$response) %in% 1:2))
devtools::test()
# parameters that can be used to simulate data
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
true
# test with simulated data
expect_error(simulate.neural(true_pars = NULL,
sigma_gen = 0.01,
dataset   = NULL))
# test with simulated data
expect_error(simulate.dynamic(true_pars = NULL,
sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate.dynamic(n_blocks  = -1,
true_pars = true,
sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate.dynamic(true_pars = true,
sigma_gen = -6,
dataset   = NULL))
warnings()
class(0.01)
expect_error(simulate.dynamic(true_pars = true,
sigma_gen = -6,
dataset   = NULL))
expect_error(simulate.dynamic(true_pars = true,
sigma_gen = -6,
dataset   = NULL))
true_pars = true
sigma_gen = -6
# checking for faulty input
stopifnot(exprs = {
n_blocks > 0
class(n_blocks) %in% c("numeric", "integer")
xor(is.null(true_pars), is.null(dataset))
length(true_pars) > 0
!is.null(names(true_pars))
("beta" %in% names(true_pars))
})
if (!is.null(sigma_gen)){
stopifnot(exprs = {
class(sigma_gen) %in% c("numeric", "integer")
(sigma_gen > 0 & sigma_gen < 1000)
})
}
devtools::document()
# test for bad input
test_that("param.draw handles faulty input correctly", {
# parameters that can be used to simulate data
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
# test with simulated data
expect_error(simulate.neural(true_pars = NULL,
sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate.neural(sub_id    = -1,
true_pars = true,
sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate.neural(n_blocks  = -1,
true_pars = true,
sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate.neural(true_pars = true,
sigma_gen = -6,
dataset   = NULL))
expect_error(simulate.neural(true_pars = NULL,
sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate.neural(true_pars = seq(.1, .4, .1),
sigma_gen = 0.01,
dataset   = NULL))
# tests with empirical data
load(file = system.file("data", "sub-02 - simulate.neural.RData",
package = "labdance"))
d_copy = d
d_copy$stim = NULL
expect_error(simulate.neural(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
d_copy = d
d_copy$repetition = NULL
expect_error(simulate.neural(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
d_copy = d
d_copy$block_nr = NULL
expect_error(simulate.neural(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
# test with dynamic parameters
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
expect_error(simulate.neural(true_pars = true,
sigma_gen = 0.01,
dataset   = NULL))
})
# test whether the output we get is expected
test_that("the output we get is expected", {
# without neural data
n_blocks = 12
d = simulate.neural(n_blocks  = n_blocks,
true_pars = param.draw(n_drift = 8,
dynamic = F),
sigma_gen = NULL)
expect_equal(nrow(d), n_blocks * 32)
expect_equal(ncol(d), 6)
expect_false("neural" %in% names(d))
# with neural data
d = simulate.neural(true_pars = param.draw(n_drift = 8,
dynamic = F),
sigma_gen = 0.01)
expect_equal(nrow(d), 512)
expect_equal(ncol(d), 7)
expect_true("neural" %in% names(d))
# check the output of the simulated data
expect_true(all(unique(d$stim) == 1:4))
expect_true(all(unique(d$repetition) == 1:8))
expect_true(all(unique(d$response) %in% 1:2))
expect_true(all(d$block_nr[seq(1, 512, 32)] == 1:16))
expect_true(all(d$rt > 0))
expect_length(unique(d$sub_id), 1)
})
# parameters that can be used to simulate data
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
# test with simulated data
expect_error(simulate.dynamic(true_pars = NULL,
sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate.dynamic(n_blocks  = -1,
true_pars = true,
sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate.dynamic(true_pars = true,
sigma_gen = -6,
dataset   = NULL))
expect_error(simulate.dynamic(true_pars = seq(.1, .4, .1),
sigma_gen = 0.01,
dataset   = NULL))
# tests with empirical data
load(file = system.file("data", "sub-02 - simulate.dynamic.RData",
package = "labdance"))
View(d)
View(d)
# tests with empirical data
load("C:/Users/pieter/Downloads/GitHub/phuycke/labdance/data/sub-02 - simulate.dynamic.RData")
View(d)
rm(d)
# tests with empirical data
load(file = system.file("data", "sub-02 - simulate.dynamic.RData",
package = "labdance"))
d_copy = d
d_copy$stim = NULL
expect_error(simulate.neural(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
d_copy = d
d_copy$repetition = NULL
expect_error(simulate.neural(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
# test with dynamic parameters
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
# test for bad input
test_that("param.draw handles faulty input correctly", {
# parameters that can be used to simulate data
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
# test with simulated data
expect_error(simulate.dynamic(true_pars = NULL,
sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate.dynamic(n_blocks  = -1,
true_pars = true,
sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate.dynamic(true_pars = true,
sigma_gen = -6,
dataset   = NULL))
expect_error(simulate.dynamic(true_pars = seq(.1, .4, .1),
sigma_gen = 0.01,
dataset   = NULL))
# tests with empirical data
load(file = system.file("data", "sub-02 - simulate.dynamic.RData",
package = "labdance"))
d_copy = d
d_copy$stim = NULL
expect_error(simulate.dynamic(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
d_copy = d
d_copy$repetition = NULL
expect_error(simulate.dynamic(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
# test with dynamic parameters
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
expect_error(simulate.dynamic(true_pars = true,
sigma_gen = 0.01,
dataset   = NULL))
})
n_blocks = 12
d = simulate.dynamic(n_blocks  = n_blocks,
true_pars = param.draw(n_drift = NULL,
dynamic = T),
sigma_gen = NULL)
d = simulate.dynamic(n_blocks  = n_blocks,
true_pars = param.draw(base_par = c("a", "b", "t0", "sd", "beta")
n_drift  = NULL,
dynamic  = T),
sigma_gen = NULL)
d = simulate.dynamic(n_blocks  = n_blocks,
true_pars = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T),
sigma_gen = NULL)
expect_equal(nrow(d), n_blocks * 32)
expect_equal(ncol(d), 7)
expect_false("neural" %in% names(d))
n_blocks = 12
d = simulate.dynamic(n_blocks  = n_blocks,
true_pars = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T),
sigma_gen = NULL)
expect_equal(nrow(d), n_blocks * 32)
expect_equal(ncol(d), 7)
expect_false("neural" %in% names(d))
# with neural data
d = simulate.dynamic(true_pars = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T),
sigma_gen = NULL)
expect_equal(nrow(d), 512)
expect_equal(ncol(d), 8)
expect_true("neural" %in% names(d))
View(d)
# with neural data
d = simulate.dynamic(true_pars = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T),
sigma_gen = 0.01)
expect_equal(nrow(d), 512)
expect_equal(ncol(d), 8)
expect_true("neural" %in% names(d))
head(d)
# check the output of the simulated data
expect_true(all(unique(d$stim) == 1:4))
unique(d$condition)
expect_true(all(unique(d$condition) %in% c("novel", "repeating")))
expect_true(all(unique(d$response) %in% 1:2))
expect_true(all(d$block_nr[seq(1, 512, 32)] == 1:16))
expect_true(all(d$rt > 0))
expect_length(unique(d$sub_id), 1)
$mean_v1 + d$mean_v2
d$mean_v1 + d$mean_v2
expect_true(all(d$mean_v1 + d$mean_v2 == 1))
expect_true(all((d$mean_v1 + d$mean_v2) == 1))
d$mean_v1 + d$mean_v2) == 1
(d$mean_v1 + d$mean_v2) == 1
expect_true(all(round(d$mean_v1 + d$mean_v2, .1) == 1))
# test for bad input
test_that("param.draw handles faulty input correctly", {
# parameters that can be used to simulate data
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
# test with simulated data
expect_error(simulate.dynamic(true_pars = NULL,
sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate.dynamic(n_blocks  = -1,
true_pars = true,
sigma_gen = 0.01,
dataset   = NULL))
expect_error(simulate.dynamic(true_pars = true,
sigma_gen = -6,
dataset   = NULL))
expect_error(simulate.dynamic(true_pars = seq(.1, .4, .1),
sigma_gen = 0.01,
dataset   = NULL))
# tests with empirical data
load(file = system.file("data", "sub-02 - simulate.dynamic.RData",
package = "labdance"))
d_copy = d
d_copy$stim = NULL
expect_error(simulate.dynamic(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
d_copy = d
d_copy$repetition = NULL
expect_error(simulate.dynamic(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
# test with dynamic parameters
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
expect_error(simulate.dynamic(true_pars = true,
sigma_gen = 0.01,
dataset   = NULL))
})
# test whether the output we get is expected
test_that("the output we get is expected", {
n_blocks = 12
d = simulate.dynamic(n_blocks  = n_blocks,
true_pars = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T),
sigma_gen = NULL)
expect_equal(nrow(d), n_blocks * 32)
expect_equal(ncol(d), 7)
expect_false("neural" %in% names(d))
# with neural data
d = simulate.dynamic(true_pars = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T),
sigma_gen = 0.01)
expect_equal(nrow(d), 512)
expect_equal(ncol(d), 8)
expect_true("neural" %in% names(d))
# check the output of the simulated data
expect_true(all(unique(d$stim) == 1:4))
expect_true(all(unique(d$condition) %in% c("novel", "repeating")))
expect_true(all(unique(d$response) %in% 1:2))
expect_true(all(d$block_nr[seq(1, 512, 32)] == 1:16))
expect_true(all(d$rt > 0))
expect_true(all(c("mean_v1", "mean_v2") %in% colnames(d)))
expect_true(all(round(d$mean_v1 + d$mean_v2, .1) == 1))
})
devtools::test()
# tests with empirical data
load(file = system.file("data", "sub-02 - simulate.dynamic.RData",
package = "labdance"))
d_copy = d
d_copy$stim = NULL
expect_error(simulate.data(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
d_copy = d
d_copy$repetition = NULL
expect_error(simulate.data(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
# tests with empirical data
load(file = system.file("data", "sub-02 - simulate.dynamic.RData",
package = "labdance"))
d_copy = d
d_copy$stim = NULL
expect_error(simulate.data(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
d_copy = d
d_copy$repetition = NULL
expect_error(simulate.data(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
# tests with empirical data
load(file = system.file("data", "sub-02 - simulate.neural.RData",
package = "labdance"))
d_copy = d
d_copy$stim = NULL
expect_error(simulate.data(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
d_copy = d
d_copy$repetition = NULL
expect_error(simulate.data(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
d_copy = d
d_copy$block_nr = NULL
expect_error(simulate.data(true_pars = true,
sigma_gen = 0.01,
dataset   = d_copy))
devtools::document()
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
set.seed(2022)
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
d1 = simulate.dynamic(true_pars = true,
sigma_gen = 0.01)
d2 = simulate.data(true_pars = true,
sigma_gen = 0.01)
expect_identical(d1, d2)
expect_identical(simulate.dynamic(true_pars = true,
sigma_gen = 0.01),
simulate.data(true_pars = true,
sigma_gen = 0.01))
View(d1)
View(d2)
# simulated data
## dynamic LBA
set.seed(2022)
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
d1 = simulate.dynamic(true_pars = true,
sigma_gen = 0.01)
d2 = simulate.data(true_pars = true,
sigma_gen = 0.01)
View(d1)
View(d2)
true
expect_identical(colnames(d1), colnames(d2))
# dLBA: simulated data
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
d1 = simulate.dynamic(true_pars = true,
sigma_gen = 0.01)
d2 = simulate.data(true_pars = true,
sigma_gen = 0.01)
expect_identical(colnames(d1), colnames(d2))
# nLBA: simulated data
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
d1 = simulate.dynamic(true_pars = true,
sigma_gen = 0.01)
d2 = simulate.data(true_pars = true,
sigma_gen = 0.01)
expect_identical(colnames(d1), colnames(d2))
# dLBA: simulated data
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
d1 = simulate.dynamic(true_pars = true,
sigma_gen = 0.01)
d2 = simulate.data(true_pars = true,
sigma_gen = 0.01)
expect_identical(colnames(d1), colnames(d2))
# nLBA: simulated data
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
d1 = simulate.neural(true_pars = true,
sigma_gen = 0.01)
d2 = simulate.data(true_pars = true,
sigma_gen = 0.01)
expect_identical(colnames(d1), colnames(d2))
devtools::document()
devtools::test()
