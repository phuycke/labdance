simulate.data(true_pars = true,
sigma_gen = 0.01))
View(d1)
View(d2)
# simulated data
## dynamic LBA
set.seed(2022)
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
d1 = simulate.dynamic(true_pars = true,
sigma_gen = 0.01)
d2 = simulate.data(true_pars = true,
sigma_gen = 0.01)
View(d1)
View(d2)
true
expect_identical(colnames(d1), colnames(d2))
# dLBA: simulated data
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
d1 = simulate.dynamic(true_pars = true,
sigma_gen = 0.01)
d2 = simulate.data(true_pars = true,
sigma_gen = 0.01)
expect_identical(colnames(d1), colnames(d2))
# nLBA: simulated data
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
d1 = simulate.dynamic(true_pars = true,
sigma_gen = 0.01)
d2 = simulate.data(true_pars = true,
sigma_gen = 0.01)
expect_identical(colnames(d1), colnames(d2))
# dLBA: simulated data
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
d1 = simulate.dynamic(true_pars = true,
sigma_gen = 0.01)
d2 = simulate.data(true_pars = true,
sigma_gen = 0.01)
expect_identical(colnames(d1), colnames(d2))
# nLBA: simulated data
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
d1 = simulate.neural(true_pars = true,
sigma_gen = 0.01)
d2 = simulate.data(true_pars = true,
sigma_gen = 0.01)
expect_identical(colnames(d1), colnames(d2))
devtools::document()
devtools::test()
# tests with empirical data
load(file = system.file("data", "sub-02 - simulate.dynamic.RData",
package = "labdance"))
devtools::document()
# tests with empirical data
load(file = system.file("data", "sub-02 - simulate.dynamic.RData",
package = "labdance"))
head(d)
d_copy = d
d_copy$stim = NULL
expect_error(netinputs(beta    = .5,
dataset = d_copy))
library(testthat)
expect_error(netinputs(beta    = .5,
dataset = d_copy))
names(dataset)
names(d_copy)
dataset=d_copy
all(c("stim", "condition" %in% names(dataset)))
devtools::document()
expect_error(netinputs(beta    = .5,
dataset = d_copy))
d_copy = d
d_copy$condition = NULL
expect_error(netinputs(beta    = .5,
dataset = d_copy))
class(.5)
devtools::document()
# test beta
expect_error(netinputs(beta = -.5))
expect_error(netinputs(beta = "0.5"))
expect_error(netinputs(beta = 100))
devtools::document()
devtools::document()
expect_error(netinputs(beta = NULL))
d = netinputs(.5)
View(d)
# test integrity of output
d = netinputs()
# tests with empirical data
load(file = system.file("data", "sub-02 - simulate.dynamic.RData",
package = "labdance"))
# test integrity of output
d = netinputs(beta = .7)
sum(d)
d[[1]]
d[[1]] + d[[2]]
d[[1]] + d[[2]] == 1
all(round(d[[1]] + d[[2]], 10) == 1)
expect_true(all(round(d[[1]] + d[[2]], 10) == 1))
# test for bad input
test_that("param.draw handles faulty input correctly", {
# test beta
expect_error(netinputs(beta = -.5))
expect_error(netinputs(beta = "0.5"))
expect_error(netinputs(beta = 100))
expect_error(netinputs(beta = NULL))
# tests with empirical data
load(file = system.file("data", "sub-02 - simulate.dynamic.RData",
package = "labdance"))
d_copy = d
d_copy$stim = NULL
expect_error(netinputs(beta    = .5,
dataset = d_copy))
d_copy = d
d_copy$condition = NULL
expect_error(netinputs(beta    = .5,
dataset = d_copy))
# test integrity of output
test = netinputs(beta = .7)
expect_true(all(round(test[[1]] + test[[2]], 10) == 1))
test = netinputs(beta = .7,
dataset = d)
expect_true(all(round(test[[1]] + test[[2]], 10) == 1))
})
devtools::test()
class(dataset$response )
devtools::numeric
devtools::document()
true = param.draw(c("a", "b", "t0", "sd",
n_drift = 8,
dynamic = F))
true = param.draw(c("a", "b", "t0", "sd"),
n_drift = 8,
dynamic = F)
true
rim(list = ls())
rm(list = ls())
true = param.draw(c("a", "b", "t0", "sd"),
n_drift = 8,
dynamic = F)
true
true = param.draw(c("a", "b", "sd"),
n_drift = 8,
dynamic = F)
d = simulate.data(true_pars = true)
true = param.draw(c("a", "b", "t0", "sd"),
n_drift = 8,
dynamic = F)
d = simulate.data(true_pars = true)
View(d)
likelihood.behavioral(true, dataset = d)
set.seed(2022)
true = param.draw(c("a", "b", "t0", "sd"),
n_drift = 8,
dynamic = F)
d = simulate.data(true_pars = true)
likelihood.behavioral(true, dataset = d)
rm(list = ls())
set.seed(2022)
true = param.draw(c("a", "b", "t0", "sd"),
n_drift = 8,
dynamic = F)
d = simulate.data(true_pars = true)
likelihood.behavioral(true, dataset = d)
true[[-1]]
true[-1]
expect_error(likelihood.behavioral(true[-1], dataset = d))
param.draw(c("a", "b", "t0", "sd", "beta"),
n_drift = NULL,
dynamic = T)
expect_error(likelihood.behavioral(param.draw(c("a", "b", "t0", "sd", "beta"),
n_drift = NULL,
dynamic = T),
dataset = d))
expect_type(likelihood.behavioral(true,
dataset = d),
"numeric")
expect_type(likelihood.behavioral(true,
dataset = d),
"double")
# work with empirical data
load(file = system.file("data", "sub-02 - simulate.neural.RData",
package = "labdance"))
head(d)
likelihood.behavioral(true,
dataset = d)
# simulated data
set.seed(2022)
likelihood.behavioral(true,
dataset = d)
names(d)
load(file = system.file("data", "sub-02 - simulate.neural.RData",
package = "labdance"))
names(d) = NULL
expect_error(likelihood.behavioral(true,
dataset = d))
# work with empirical data
load(file = system.file("data", "sub-02 - simulate.neural.RData",
package = "labdance"))
expect_error(likelihood.behavioral(true,
dataset = d))
load(file = system.file("data", "sub-02 - simulate.neural.RData",
package = "labdance"))
d$rt = NULL
expect_error(likelihood.behavioral(true,
dataset = d))
# work with empirical data
load(file = system.file("data", "sub-02 - simulate.neural.RData",
package = "labdance"))
d_copy = d
d_copy$rt = NULL
expect_error(likelihood.behavioral(true,
dataset = d_copy))
d_copy = d
d_copy$response = NULL
expect_error(likelihood.behavioral(true,
dataset = d_copy))
d_copy = d
d_copy$response
d_copy$response = rep(c(0, 1), each = (nrow(d_copy) / 2))
expect_error(likelihood.behavioral(true,
dataset = d_copy))
expect_error(likelihood.behavioral(true,
dataset = d_copy))
# work with empirical data
load(file = system.file("data", "sub-02 - simulate.neural.RData",
package = "labdance"))
d_copy = d
d_copy$rt = NULL
expect_error(likelihood.behavioral(true,
dataset = d_copy))
d_copy = d
d_copy$response = NULL
expect_error(likelihood.behavioral(true,
dataset = d_copy))
d_copy = d
names(d_copy) = NULL
expect_error(likelihood.behavioral(true,
dataset = d_copy))
d_copy = d
d_copy$response = rep(c(0, 1), each = (nrow(d_copy) / 2))
expect_error(likelihood.behavioral(true,
dataset = d_copy))
d_copy = d
d_copy$response = rep(c("0", "1"), each = (nrow(d_copy) / 2))
expect_error(likelihood.behavioral(true,
dataset = d_copy))
d_copy = d
d_copy$response = rep(c(2, 3), each = (nrow(d_copy) / 2))
expect_error(likelihood.behavioral(true,
dataset = d_copy))
# work with empirical data
load(file = system.file("data", "sub-02 - simulate.neural.RData",
package = "labdance"))
d_copy = d
d_copy$rt = NULL
expect_error(likelihood.behavioral(true,
dataset = d_copy))
d_copy = d
d_copy$response = NULL
expect_error(likelihood.behavioral(true,
dataset = d_copy))
d_copy = d
names(d_copy) = NULL
expect_error(likelihood.behavioral(true,
dataset = d_copy))
d_copy = d
d_copy$response = rep(c(0, 1), each = (nrow(d_copy) / 2))
expect_error(likelihood.behavioral(true,
dataset = d_copy))
d_copy = d
d_copy$response = rep(c("0", "1"), each = (nrow(d_copy) / 2))
expect_error(likelihood.behavioral(true,
dataset = d_copy))
d_copy = d
d_copy$response = rep(c(2, 3), each = (nrow(d_copy) / 2))
expect_error(likelihood.behavioral(true,
dataset = d_copy))
d_copy = d
d_copy$response = rep(c(1, 3), each = (nrow(d_copy) / 2))
expect_error(likelihood.behavioral(true,
dataset = d_copy))
devtools::test()
devtools::document()
# simulated data
set.seed(2022)
true = param.draw(c("a", "b", "t0", "sd"),
n_drift = 8,
dynamic = F)
d = simulate.data(true_pars = true,
sigma_gen = 0.01)
View(d)
# adjust the passed parameters
expect_error(likelihood.neural(true[-1],
dataset = d))
# work with empirical data
load(file = system.file("data", "sub-02 - simulate.neural.RData",
package = "labdance"))
d_copy = d
head(d)
d_copy$neural = rnorm(nrow(d_copy))
d_copy$mean_v1 = rnorm(nrow(d_copy))
expect_error(likelihood.neural(true,
dataset = d_copy))
d_copy = d
expect_error(likelihood.neural(true,
dataset = d_copy))
devtools::test()
devtools::test_coverage()
devtools::test_coverage()
getwd()
# simulated data
set.seed(2022)
# dynamic LBA
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = NULL)
expect_equal(likelihood.summed(to_optim = true,
dataset  = simulated),
likelihood.behavioral(to_optim = true,
dataset  = simulated))
# neural LBA
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
ll.b = likelihood.behavioral(to_optim = true, dataset  = simulated)
ll.n = likelihood.neural(to_optim = true, dataset  = simulated)
ll.b = likelihood.behavioral(to_optim = true, dataset  = simulated)
ll.b
head(simulated)
dataset = simulated
stopifnot(xor("repetition" %in% names(dataset), "mean_v1" %in% names(dataset)))
!is.null(dataset$mean_v1)
ll.n = likelihood.neural(to_optim = true, dataset  = simulated)
stopifnot(exprs = {
(!is.null(names(to_optim)))
all(c("a", "b", "t0", "sd") %in% names(to_optim))
})
if (!is.null(dataset)){
stopifnot(exprs = {
(!is.null(names(to_optim)))
stopifnot(xor("repetition" %in% names(dataset), "mean_v1" %in% names(dataset)))
})
if (!is.null(dataset$mean_v1)) stopifnot((!is.null(dataset$neural)))
}
(!is.null(names(to_optim)))
to_optim = true
(!is.null(names(to_optim)))
stopifnot(xor("repetition" %in% names(dataset), "mean_v1" %in% names(dataset)))
if (!is.null(dataset$mean_v1)) stopifnot((!is.null(dataset$neural)))
devtools::document()
ll.n = likelihood.neural(to_optim = true, dataset  = simulated)
# test for faulty input
# handle bad input
stopifnot(exprs = {
(!is.null(names(to_optim)))
all(c("a", "b", "t0", "sd") %in% names(to_optim))
})
if (!is.null(dataset)){
stopifnot(exprs = {
(!is.null(names(to_optim)))
stopifnot(xor("repetition" %in% names(dataset), "mean_v1" %in% names(dataset)))
})
}
if (!is.null(dataset$mean_v1)) stopifnot((!is.null(dataset$neural)))
"repetition" %in% names(dataset)
"mean_v1" %in% names(dataset))
"mean_v1" %in% names(dataset)
xor("repetition" %in% names(dataset), "mean_v1" %in% names(dataset))
devtools::document()
ll.n = likelihood.neural(to_optim = true, dataset  = simulated)
expect_equal(likelihood.summed(to_optim = true,
dataset  = simulated),
ll.b + (1/(2*(0.01)^2)) * ll.n)
likelihood.summed(to_optim = true,
dataset  = simulated)
ll.behavioral = likelihood.behavioral(to_optim, dataset)
is.null(dataset$neural)
# for neural data, return the sum of both
ll.neural = likelihood.neural(to_optim, dataset)
ll.neural
expect_equal(likelihood.summed(to_optim  = true,
dataset   = simulated,
sigma_mod = 0.01),
ll.b + (1/(2*(0.01)^2)) * ll.n)
# LBA
true = param.draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = F)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = NULL)
expect_equal(likelihood.summed(to_optim = true,
dataset  = simulated),
likelihood.behavioral(to_optim = true,
dataset  = simulated))
true = param.draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = T)
simulated = simulate.data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
ll.b = likelihood.behavioral(to_optim = true, dataset  = simulated)
ll.b = likelihood.behavioral(to_optim = true, dataset  = simulated)
head(dataset)
dataset = simulated
head(dataset)
devtools::document()
ll.b = likelihood.behavioral(to_optim = true, dataset  = simulated)
ll.n = likelihood.neural(to_optim = true, dataset  = simulated)
ll.b
ll.n
expect_equal(likelihood.summed(to_optim  = true,
dataset   = simulated,
sigma_mod = 0.01),
ll.b + (1/(2*(0.01)^2)) * ll.n)
devtools::test()
devtools::test()
devtools::test_coverage()
?testthat::test_check
devtools::test_coverage(pkg = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
devtools::document()
devtools::test_coverage()
devtools::test()
devtools::test()
devtools::test_coverage("C:/Users/pieter/Downloads/GitHub/phuycke/labdance/tests")
devtools::test_coverage("C:/Users/pieter/Downloads/GitHub/phuycke/labdance/tests/testthat.R")
devtools::test_coverage("C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
devtools::test_coverage("C:/Users/pieter/Downloads/GitHub/phuycke/labdance/tests")
expect_error(recovery(base_par = c("a", "b", "t0", "sd"),
cycles = -2))
expect_error(recovery(base_par = c("a", "b", "t0", "sd"),
cycles = "500"))
expect_error(recovery(base_par = c("a", "b", "t0", "sd"),
cycles = 500,
sigma_mod = -5))
expect_error(recovery(base_par = c("a", "b", "t0", "sd"),
cycles = 500,
sigma_mod = ".2"))
devtools::document()
devtools::test()
devtools::test_coverage("C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
devtools::test_coverage("rtdists")
install.packages("covr")
install.packages("covr")
library(covr) # Test Coverage for Packages
covr::codecov(token = "9f49bff8-cea0-46a7-9b4c-fddf4901b682")
library(labdance)
devtools::test()
devtools::test_coverage()
devtools::test_coverage(pkg = "C:/Program Files/R/R-4.2.1/library/labdance")
detach("package:labdance", unload = TRUE)
devtools::test_coverage(pkg = "C:/Program Files/R/R-4.2.1/library/labdance")
devtools::test()
devtools::test()
devtools::document()
devtools::document()
library(labdance)
rm(list = ls())
setwd("C:/Users/pieter/Downloads/GitHub/phuycke/labdance/data")
load("simulate.dynamic.RData")
d1 = d
save(d1, "simulate.dynamic.RData")
save("simulate.dynamic.RData", d1)
?save
save(d1, file = "simulate.dynamic.RData")
rm(d)
load("simulate.neural.RData")
d2 = d
save(d2, file = "simulate.neural.RData")
devtools::document()
library(labdance)
devtools::document()
library(labdance)
library(labdance)
library(labdance)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(labdance)
devtools::document()
library(labdance)
?runig
?runif
?rnorm
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(labdance)
devtools::document()
library(labdance)
