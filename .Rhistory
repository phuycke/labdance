# and add neural data
simulated = simulate_neural(true_pars = true,
sigma_gen = 0.01,
dataset   = data_dynamic)
head(simulated)
rm(list = ls())
require(labdance)
set.seed(2022)
# load prepared empirical data
data("data_dynamic")
# get LBA parameters (8 drift rates)
true = param_draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = TRUE)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_dynamic(true_pars = true,
sigma_gen = 0.01,
dataset   = data_dynamic)
head(simulated)
all(data_dynamic$stim == simulated$stim)
rm(list = ls())
require(labdance)
set.seed(2022)
# load prepared empirical data
data("data_neural")
data_neural$block_nr = rep(1:32, nrow(data_neural) / 32)
# get LBA parameters (8 drift rates)
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_neural(true_pars = true,
sigma_gen = 0.01,
dataset   = data_neural)
head(simulated)
# check stimulus order
all(data_neural$stim == simulated$stim)
rm(list = ls())
require(labdance)
#'
set.seed(2022)
# load prepared empirical data
data("data_dynamic")
# get LBA parameters (8 drift rates)
true = param_draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = TRUE)
# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_data(true_pars = true,
dataset   = data_dynamic)
head(simulated)
# check stimulus order
all(data_dynamic$stim == simulated$stim)
library(labdance)
devtools::document()
library(labdance)
devtools::test()
devtools::test_coverage()
devtools::check(document = T)
?devtools::check
covr::package_coverage()
?covr::package_coverage()
?covr::package_coverage(path = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
covr::package_coverage(path = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
detach("package:labdance", unload = TRUE)
covr::package_coverage(path = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
devtools::test_coverage(path = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
?devtools::test_coverage()
?devtools::test_coverage(pkg = ""C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
?devtools::test_coverage(pkg = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
devtools::test_coverage(pkg = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
covr::codecov(token = "9f49bff8-cea0-46a7-9b4c-fddf4901b682")
?devtools::test_coverage(pkg = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance")
rhub::check_for_cran()
rhub::platforms()
rhub::check_for_cran()
?rhub::check_for_cran()
rhub::validate_email()
rhub::list_my_checks()
rhub::validate_email("pieter.huycke@hotmail.com")
library(labdance)
rhub::check_for_cran()
rhub::check_on_windows()
rhub::check()
rhub::validate_email()
rhub::validate_email("pieter.huycke@hotmail.com")
rhub::check()
library(labdance)
devtools::document()
results <- rhub::check_for_cran()
?rhub::check_for_cran()
results <- rhub::check_for_cran(platforms = NULL)
rhub::platforms()
results <- rhub::check_for_cran("labdance", platforms = NULL)
results <- rhub::check_for_cran("C:/Users/pieter/Downloads/GitHub/phuycke/labdance", platforms = NULL)
rhub::platforms()
rhub::check()
rhub::list_package_checks(email = "pieter.huycke@hotmail.com",
howmany = 4)
check = rhub::check_for_cran()
?rhub::check_for_cran()
trace("rhub::check_for_cran()")
trace("rhub::check_for_cran")
trace("check_for_cran")
library(rhub)
trace("check_for_cran")
trace("check_for_cran", edit = T)
check = rhub::check_for_cran()
check = rhub::check_for_cran()
check = rhub::check_for_cran(path = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance", platforms = NULL)
check = rhub::check_for_cran(path = "C:/Users/pieter/Downloads/GitHub/phuycke/labdance", platforms = c(1, 2, 3, 4, 5))
rhub::platforms()
check = rhub::check_on_windows()
check = rhub::check_on_macos()
check = rhub::check_on_ubuntu()
check = rhub::check()
rhub::check_for_cran()
install.packages("https://cran.r-project.org/src/contrib/Archive/rhub/rhub_1.0.2.tar.gz", repos=NULL, type = "source")
detach("package:rhub", unload = TRUE)
detach("package:rhub", unload = TRUE)
install.packages("https://cran.r-project.org/src/contrib/Archive/rhub/rhub_1.0.2.tar.gz", repos=NULL, type = "source")
rhub::check_for_cran()
rhub::platforms
rhub::platforms()
rhub::check_on_ubuntu()
install.packages("rhub")
install.packages("rhub")
library(labdance)
install.packages("goodpractice")
install.packages("intergrate")
install.packages("https://cran.r-project.org/src/contrib/Archive/goodpractice/goodpractice_1.0.2.tar.gz")
install.packages("https://cran.r-project.org/src/contrib/Archive/goodpractice/goodpractice_1.0.2.tar.gz", repos = NULL, type = "source")
goodpractice::gp()
detach("package:labdance", unload = TRUE)
detach("package:labdance", unload = TRUE)
goodpractice::gp()
install.packages("remotes")
install.packages("remotes")
remotes::install_github("jumpingrivers/inteRgrate")
library("inteRgrate")
check_pkg()
check_lintr()
goodpractice::gp()
# test for bad input
test_that("faulty input is effectively handled", {
# simulated data
set.seed(2022)
true <- param_draw(c("a", "b", "t0", "sd"),
n_drift = 8,
dynamic = F)
d <- simulate_data(true_pars = true)
# adjust the passed parameters
expect_error(likelihood_behavioral(true[-1],
dataset = d))
rm(d)
# work with empirical data
data("data_neural")
d_copy <- data_neural
d_copy$rt <- NULL
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
d_copy$response <- NULL
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
names(d_copy) <- NULL
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
d_copy$response <- rep(c(0, 1), each = (nrow(d_copy) / 2))
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
d_copy$response <- rep(c("0", "1"), each = (nrow(d_copy) / 2))
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
d_copy$response <- rep(c(2, 3), each = (nrow(d_copy) / 2))
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
d_copy$response <- rep(c(1, 3), each = (nrow(d_copy) / 2))
expect_error(likelihood_behavioral(true,
dataset = d_copy))
})
library(testthat)
# test for bad input
test_that("faulty input is effectively handled", {
# simulated data
set.seed(2022)
true <- param_draw(c("a", "b", "t0", "sd"),
n_drift = 8,
dynamic = F)
d <- simulate_data(true_pars = true)
# adjust the passed parameters
expect_error(likelihood_behavioral(true[-1],
dataset = d))
rm(d)
# work with empirical data
data("data_neural")
d_copy <- data_neural
d_copy$rt <- NULL
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
d_copy$response <- NULL
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
names(d_copy) <- NULL
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
d_copy$response <- rep(c(0, 1), each = (nrow(d_copy) / 2))
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
d_copy$response <- rep(c("0", "1"), each = (nrow(d_copy) / 2))
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
d_copy$response <- rep(c(2, 3), each = (nrow(d_copy) / 2))
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
d_copy$response <- rep(c(1, 3), each = (nrow(d_copy) / 2))
expect_error(likelihood_behavioral(true,
dataset = d_copy))
})
library(labdance)
# test for bad input
test_that("faulty input is effectively handled", {
# simulated data
set.seed(2022)
true <- param_draw(c("a", "b", "t0", "sd"),
n_drift = 8,
dynamic = F)
d <- simulate_data(true_pars = true)
# adjust the passed parameters
expect_error(likelihood_behavioral(true[-1],
dataset = d))
rm(d)
# work with empirical data
data("data_neural")
d_copy <- data_neural
d_copy$rt <- NULL
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
d_copy$response <- NULL
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
names(d_copy) <- NULL
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
d_copy$response <- rep(c(0, 1), each = (nrow(d_copy) / 2))
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
d_copy$response <- rep(c("0", "1"), each = (nrow(d_copy) / 2))
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
d_copy$response <- rep(c(2, 3), each = (nrow(d_copy) / 2))
expect_error(likelihood_behavioral(true,
dataset = d_copy))
d_copy <- data_neural
d_copy$response <- rep(c(1, 3), each = (nrow(d_copy) / 2))
expect_error(likelihood_behavioral(true,
dataset = d_copy))
})
# test for bad input
test_that("the output of likelihood_summed is expected", {
# simulated data
set.seed(2022)
# LBA
true <- param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
simulated <- simulate_data(true_pars = true,
dataset   = NULL,
sigma_gen = NULL)
expect_equal(likelihood_summed(to_optim = true,
dataset  = simulated),
likelihood_behavioral(to_optim = true,
dataset  = simulated))
# dynamic LBA
true <- param_draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = TRUE)
simulated <- simulate_data(true_pars = true,
dataset   = NULL,
sigma_gen = NULL)
expect_equal(likelihood_summed(to_optim = true,
dataset  = simulated),
likelihood_behavioral(to_optim = true,
dataset  = simulated))
# neural LBA
true <- param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
simulated <- simulate_data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
ll.b <- likelihood_behavioral(to_optim = true, dataset  = simulated)
ll.n <- likelihood_neural(to_optim = true, dataset  = simulated)
expect_equal(likelihood_summed(to_optim  = true,
dataset   = simulated,
sigma_mod = 0.01),
ll.b + (1/(2*(0.01)^2)) * ll.n)
# dynamic neural LBA
true <- param_draw(base_par = c("a", "b", "t0", "sd", "beta"),
n_drift  = NULL,
dynamic  = TRUE)
simulated <- simulate_data(true_pars = true,
dataset   = NULL,
sigma_gen = 0.01)
ll.b <- likelihood_behavioral(to_optim = true, dataset  = simulated)
ll.n <- likelihood_neural(to_optim = true, dataset  = simulated)
expect_equal(likelihood_summed(to_optim  = true,
dataset   = simulated,
sigma_mod = 0.01),
ll.b + (1/(2*(0.01)^2)) * ll.n)
})
goodpractice::gp()
detach("labdance")
detach("package:labdance", unload = TRUE)
goodpractice::gp()
require(labdance)
set.seed(2022)
# get parameters, simulate data and calculate likelihood
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
simulated = simulate_data(true_pars = true,
dataset   = NULL)
dataset = simulated
1:length(unique(dataset$choice))
1:unique(dataset$choice)
unique(dataset$choice)
head(simulated)
1:length(unique(dataset$response))
1:seq_along(unique(dataset$response))
1:seq_len(unique(dataset$response))
unique(dataset$response)
seq_len(unique(dataset$response))
seq_along(unique(dataset$response))
1: length(unique(dataset$response))
nrow(dataset)
seq_along(nrow(dataset))
seq_len(dataset)
seq_along(512)
seq_len(512)
goodpractice::gp()
detach("package:labdance", unload=T)
goodpractice::gp()
library(labdance)
require(labdance)
#'
set.seed(2022)
#'
# get parameters, simulate data and calculate likelihood
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
simulated = simulate_data(true_pars = true,
dataset   = NULL)
ll.true = likelihood_behavioral(to_optim = true,
dataset  = simulated)
#'
# calculate likelihood for another parameter set
test = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
ll.test = likelihood_behavioral(to_optim = test,
dataset  = simulated)
#'
# check that likelihood is lowest for the true parameter set
sprintf("Negative loglikelihood for true parameters: %.02f", ll.true)
# [1] "Negative loglikelihood for true parameters: 747.29"
sprintf("Negative loglikelihood for other parameters: %.02f", ll.test)
# [1] "Negative loglikelihood for other parameters: 926.55"
require(labdance)
#'
set.seed(2022)
#'
# get parameters, simulate data and calculate likelihood
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
simulated = simulate_data(true_pars = true,
dataset   = NULL)
ll.true = likelihood_behavioral(to_optim = true,
dataset  = simulated)
#'
# calculate likelihood for another parameter set
test = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
ll.test = likelihood_behavioral(to_optim = test,
dataset  = simulated)
#'
# check that likelihood is lowest for the true parameter set
sprintf("Negative loglikelihood for true parameters: %.02f", ll.true)
# [1] "Negative loglikelihood for true parameters: 747.29"
sprintf("Negative loglikelihood for other parameters: %.02f", ll.test)
# [1] "Negative loglikelihood for other parameters: 926.55"
require(labdance)
#'
set.seed(2022)
#'
# get parameters, simulate data and calculate likelihood
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
simulated = simulate_data(true_pars = true,
dataset   = NULL)
#'
# get parameters, simulate data and calculate likelihood
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
true
devtools::document()
require(labdance)
#'
# get parameters, simulate data and calculate likelihood
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
true
require(labdance)
#'
set.seed(2022)
#'
# get parameters, simulate data and calculate likelihood
true = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
simulated = simulate_data(true_pars = true,
dataset   = NULL)
ll.true = likelihood_behavioral(to_optim = true,
dataset  = simulated)
#'
# calculate likelihood for another parameter set
test = param_draw(base_par = c("a", "b", "t0", "sd"),
n_drift  = 8,
dynamic  = FALSE)
ll.test = likelihood_behavioral(to_optim = test,
dataset  = simulated)
#'
# check that likelihood is lowest for the true parameter set
sprintf("Negative loglikelihood for true parameters: %.02f", ll.true)
# [1] "Negative loglikelihood for true parameters: 747.29"
sprintf("Negative loglikelihood for other parameters: %.02f", ll.test)
# [1] "Negative loglikelihood for other parameters: 926.55"
library(labdance)
goodpractice::gp()
detach("package:labdance", unload = T)
goodpractice::gp()
devtools::document()
library(labdance)
inteRgrate::check_pkg()
detach("package:labdance", unload = TRUE)
inteRgrate::check_pkg()
devtools::check_rhub()
devtools::check_win_devel()
devtools::spell_check()
devtools::document()
inteRgrate::check_lintr()
devtools::document()
require(labdance)
#'
# load prepared empirical data
data("data_dynamic")
#'
# simulate netinputs based on data and low beta
ni = netinputs(beta = .2,
dataset = data_dynamic)
print(rbind(ni[[1]][20:25], ni[[2]][20:25]))
devtools::document()
library(labdance)
detach("package:labdance", unload = TRUE)
inteRgrate::check_lintr()
inteRgrate::check_lintr()
inteRgrate::check_tidy_description()
usethis::use_tidy_description()
inteRgrate::check_tidy_description()
inteRgrate::check_r_filenames()
inteRgrate::check_gitignore()
inteRgrate::check_gitignore()
inteRgrate::check_gitignore()
inteRgrate::check_gitignore()
inteRgrate::check_gitignore()
inteRgrate::check_gitignore()
inteRgrate::check_gitignore()
inteRgrate::check_version()
library(labdance)
detach("package:labdance", unload = TRUE)
devtools::check_win_devel()
goodpractice::gp()
devtools::check_mac_release()
rhub::check()
rhub::check()
R.version
rhub::check()
