% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_dynamic.R
\name{simulate_dynamic}
\alias{simulate_dynamic}
\title{simulate_dynamic}
\usage{
simulate_dynamic(
  n_blocks = 16,
  true_pars = NULL,
  sigma_gen = NULL,
  dataset = NULL
)
}
\arguments{
\item{n_blocks}{Determines the number of experimental blocks within a dataset.}

\item{true_pars}{The LBA parameters used to generate the data.}

\item{sigma_gen}{Optional: only for neural models.
The variance in the generation of the true neural data.}

\item{dataset}{Optional: only when empirical data is available.
Replaces the stimuli and conditions by information observed in the data. Hence,
this allows data to be generated relying on stimuli actually seen by
subjects.}
}
\value{
data.frame containing behavioral and/or neural data.
}
\description{
Helper function called by simulate_data() whenever data from
    a dynamic model (dLBA, dnLBA) needs to be generated.
}
\examples{
require(labdance)

set.seed(2022)

# load prepared empirical data
data("data_dynamic")

# get LBA parameters (8 drift rates)
true = param_draw(base_par = c("a", "b", "t0", "sd", "beta"),
                  n_drift  = NULL,
                  dynamic  = TRUE)

# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_dynamic(true_pars = true,
                             sigma_gen = 0.01,
                             dataset   = data_dynamic)
head(simulated)

#   stim target condition       rt response   mean_v1   mean_v2    neural
# 1    1      1     novel 1.608958        1 0.5000000 0.5000000 0.4900472
# 2    1      1     novel 2.026692        1 0.5230748 0.4769252 0.5334783
# 3    3      2     novel 1.519964        1 0.5000000 0.5000000 0.5282756
# 4    4      2     novel 1.712398        1 0.5000000 0.5000000 0.4850896
# 5    2      1     novel 1.513373        2 0.5000000 0.5000000 0.5006154
# 6    3      2     novel 2.134347        2 0.4769252 0.5230748 0.4712491

# check stimulus order
all(data_dynamic$stim == simulated$stim)
# [1] TRUE

}
