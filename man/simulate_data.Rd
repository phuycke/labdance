% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_data.R
\name{simulate_data}
\alias{simulate_data}
\title{simulate_data}
\usage{
simulate_data(
  sub_id = 1,
  n_blocks = 16,
  true_pars = NULL,
  sigma_gen = NULL,
  dataset = NULL
)
}
\arguments{
\item{sub_id}{Optional: only for neural models.
The subject identifier. Can be used to generate different datasets that
each belong to a different "subject".}

\item{n_blocks}{Optional: only for neural models.
Determines the number of experimental blocks within a dataset.}

\item{true_pars}{The LBA parameters used to generate the data.}

\item{sigma_gen}{Optional: only for neural models.
The variance in the generation of the true neural data.}

\item{dataset}{Optional: only when empirical data is available.
This allows data to be generated relying on stimuli actually seen by
subjects.}
}
\value{
data.frame containing simulated behavioral and/or neural data
    depending on the underlying model.
}
\description{
Function that makes calls to simulate_dynamic() or
    simulate_neural() depending on the type of underlying model.
}
\examples{
require(labdance)

set.seed(2022)

# load prepared empirical data
load("data/data_neural.RData")

# get dLBA parameters
true = param_draw(base_par = c("a", "b", "t0", "sd"),
                  n_drift  = 8,
                  dynamic  = FALSE)

# simulate data retaining the stimulus order shown to subject 2,
# and add neural data
simulated = simulate_data(true_pars = true,
                          sigma_gen = 0.01,
                          dataset   = d)
head(simulated)

#   sub_id stim repetition block_nr       rt response    neural
# 1      1    1          1        1 2.076967        1 0.3554553
# 2      1    1          2        1 1.898463        2 0.3688368
# 3      1    3          1        1 1.274176        2 0.3277951
# 4      1    4          1        1 1.335997        2 0.3238378
# 5      1    2          1        1 1.757728        2 0.3281104
# 6      1    3          2        1 1.572040        2 0.3861202

}
