#' @title simulate.data
#'
#' @description Function that makes calls to simulate.dynamic() or
#'     simulate.neural() depending on the type of underlying model.
#'
#' @param sub_id Optional: only for neural models.
#'     The subject identifier. Can be used to generate different datasets that
#'     each belong to a different "subject".
#' @param n_blocks Optional: only for neural models.
#'     Determines the number of experimental blocks within a dataset.
#' @param true_pars The LBA parameters used to generate the data.
#' @param sigma_gen Optional: only for neural models.
#'     The variance in the generation of the true neural data.
#'
#' @return data.frame containing simulated behavioral and/or neural data
#'     depending on the underlying model.
#' @examples
#' true      = param_draw(base_par = c("a", "b", "t0", "sd"),
#'                        n_drift  = 8,
#'                        dynamic  = F)
#' simulated = simulate.data(1, 16, true)
#'
#' head(simulated)
#'
#' #     stim repetition       rt response block_nr subject
#' # 1      1          1 1.244331        1        1       1
#' # 2      2          1 1.710793        2        1       1
#' # 3      3          1 1.504034        2        1       1
#' # 4      4          1 1.531655        2        1       1
#' # 5      1          2 1.494211        2        1       1
#' # 6      2          2 1.548125        2        1       1
#'
#' @export
#' @import rtdists


simulate.data <- function(sub_id    = NULL,
                          n_blocks  = NULL,
                          true_pars,
                          sigma_gen = NULL){
  # (n)LBA
  if (!"beta" %in% names(true_pars)){
    return(simulate.neural(sub_id, n_blocks, true_pars, sigma_gen))
  } else{
    # d(n)LBA
    return(simulate.dynamic(true_pars, sigma_gen))
  }
}

